Index: src/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport java.util.ResourceBundle;\r\nimport java.util.concurrent.ThreadLocalRandom;\r\nimport controls.Game;\r\nimport controls.board.Board;\r\nimport controls.board.BoardSquare;\r\nimport controls.board.CitizenSquare;\r\nimport controls.board.MandarinSquare;\r\nimport controls.player.Player;\r\nimport javafx.animation.*;\r\nimport javafx.application.Application;\r\nimport javafx.application.Platform;\r\nimport javafx.beans.binding.Bindings;\r\nimport javafx.beans.value.ObservableValue;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.canvas.GraphicsContext;\r\nimport javafx.scene.layout.*;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.CycleMethod;\r\nimport javafx.scene.paint.Stop;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.paint.LinearGradient;\r\nimport javafx.scene.shape.Rectangle;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.canvas.Canvas;\r\nimport javax.swing.*;\r\n\r\nimport javafx.util.Duration;\r\n\r\n\r\npublic class Menu extends Application{\r\n\tpublic Stage stage;\r\n    public Scene scene1, scene2, scene3, scene4, scene5, scene6, scene7, scene8, scene9;\r\n    public Parent layout1, layout2;\r\n    static JFrame frame;\r\n    public ArrayList<BoardSquare> squares;\r\n    public ArrayList<ViewStone> ImageHolder = new ArrayList<ViewStone>();\r\n    public Game MainGame;\r\n    public boolean startGame = false;\r\n    private GraphicsContext gc, gc1;\r\n\r\n    @Override\r\n    public void start(Stage primarystage) throws Exception {\r\n        layout1= createStartMenu();\r\n        scene1 =  new Scene(layout1);\r\n        stage = primarystage;\r\n        stage.setScene(scene1);\r\n        setup();\r\n        Canvas canvas = new Canvas(1080, 960);\r\n        gc = canvas.getGraphicsContext2D();\r\n        Timeline timeline = new Timeline(new KeyFrame(Duration.millis(200), e -> run(gc)));\r\n        timeline.setCycleCount(Timeline.INDEFINITE);\r\n        timeline.play();\r\n\r\n        stage.show();\r\n\r\n        //layout2 = RenderUI();\r\n        Image bgImage = new Image(getClass().getResource(\"gui/asset/mandarin_background.png\").toExternalForm());\r\n        ImageView img_view =  new ImageView(bgImage);\r\n        img_view.setY(0);\r\n        img_view.setX(0);\r\n        HBox Squares_row1 = new HBox(\r\n                new CitizenSquareUI(\"Square 1\",()->ChoosePivot(1),110,120,1),\r\n                new CitizenSquareUI(\"Square 2\",()->ChoosePivot(2),110,120,2),\r\n                new CitizenSquareUI(\"Square 3\",()->ChoosePivot(3),105,120,3),\r\n                new CitizenSquareUI(\"Square 4\",()->ChoosePivot(4),110,120,4),\r\n                new CitizenSquareUI(\"Square 5\",()->ChoosePivot(5),110,120,5)\r\n        );\r\n\r\n        Squares_row1.setTranslateX(210);\r\n        Squares_row1.setTranslateY(265);\r\n        HBox Squares_row2 = new HBox(\r\n                new CitizenSquareUI(\"Square 11\",()->ChoosePivot(11),110,120,11),\r\n                new CitizenSquareUI(\"Square 10\",()->ChoosePivot(10),110,120,10),\r\n                new CitizenSquareUI(\"Square 9\",()->ChoosePivot(9),105,120,9),\r\n                new CitizenSquareUI(\"Square 8\",()->ChoosePivot(8),110,120,8),\r\n                new CitizenSquareUI(\"Square 7\",()->ChoosePivot(7),110,120,7)\r\n        );\r\n        Squares_row2.setTranslateX(210);\r\n        Squares_row2.setTranslateY(395);\r\n        HBox Mandarin_Square1 = new HBox(\r\n                new CitizenSquareUI(\"Mandarin Square 6\",()->{},110,240,6)\r\n        );\r\n        Mandarin_Square1.setTranslateX(755);\r\n        Mandarin_Square1.setTranslateY(265);\r\n        HBox Mandarin_Square2 = new HBox(\r\n                new CitizenSquareUI(\"Mandarin Square 0\",()->{},110,240,0)\r\n        );\r\n        Mandarin_Square2.setTranslateX(100);\r\n        Mandarin_Square2.setTranslateY(265);\r\n        scene2 = new Scene(new Pane(img_view,canvas,Squares_row1,Squares_row2,Mandarin_Square1,Mandarin_Square2));\r\n\r\n\r\n        System.out.println(\"Running...\");\r\n        \r\n     // help scene - scene3\r\n        Image helpMenuImage = new Image(getClass().getResource(\"gui/asset/MenuScene.png\").toExternalForm());\r\n        ImageView helpView = new ImageView(helpMenuImage);\r\n        helpView.setY(0);\r\n        helpView.setX(0);\r\n        \r\n     // rule board\r\n        Image setupRule = new Image(\"gui/asset/Setup.png\");\r\n        ImageView setupRuleView = new ImageView(setupRule);\r\n        setupRuleView.setTranslateX(0);\r\n        setupRuleView.setTranslateY(-500);\r\n\r\n     // right button\r\n        Image rightImageSetup = new Image(\"gui/asset/RIGHT.png\");\r\n        ImageView rightViewSetup = new ImageView(rightImageSetup);\r\n        Image rightImageSetup2 = new Image(\"gui/asset/RIGHT2.png\");\r\n        ImageView rightViewSetup2 = new ImageView(rightImageSetup2);\r\n        \r\n        rightViewSetup.setFitHeight(80);\r\n        rightViewSetup.setFitWidth(80);\r\n        rightViewSetup2.setFitHeight(80);\r\n        rightViewSetup2.setFitWidth(80);\r\n\r\n        Button rightButtonSetup = new Button();\r\n        rightButtonSetup.setTranslateX(740);\r\n        rightButtonSetup.setTranslateY(-415);\r\n        rightButtonSetup.setPrefSize(80, 80);\r\n        rightButtonSetup.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        rightButtonSetup.setGraphic(rightViewSetup);\r\n\r\n        rightButtonSetup.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                rightButtonSetup.setGraphic(rightViewSetup2);\r\n            } else {\r\n                rightButtonSetup.setGraphic(rightViewSetup);\r\n            }\r\n        });\r\n        \r\n        rightButtonSetup.setOnAction(event -> {\r\n            stage.setScene(scene4);\r\n            setupRuleView.setTranslateY(-500);\r\n            rightButtonSetup.setTranslateY(-415);\r\n\r\n            TranslateTransition scatteringBoardTransition = new TranslateTransition(Duration.seconds(1), ((Pane) scene4.getRoot()).getChildren().get(1));\r\n            scatteringBoardTransition.setByY(500);\r\n            scatteringBoardTransition.setInterpolator(Interpolator.EASE_OUT);\r\n            scatteringBoardTransition.play();\r\n\r\n            TranslateTransition rightTransitionScattering = new TranslateTransition(Duration.seconds(1), ((Pane) scene4.getRoot()).getChildren().get(2));\r\n            rightTransitionScattering.setInterpolator(Interpolator.EASE_OUT);\r\n            rightTransitionScattering.setByY(500);\r\n            rightTransitionScattering.play();\r\n\r\n            TranslateTransition leftTransitionScattering = new TranslateTransition(Duration.seconds(1), ((Pane) scene4.getRoot()).getChildren().get(3));\r\n            leftTransitionScattering.setInterpolator(Interpolator.EASE_OUT);\r\n            leftTransitionScattering.setByY(500);\r\n            leftTransitionScattering.play();\r\n        });\r\n        \r\n     // back to menu button\r\n        Image backImage = new Image(\"gui/asset/BACK.png\");\r\n        ImageView backView = new ImageView(backImage);\r\n        Image backImage2 = new Image(\"gui/asset/BACK2.png\");\r\n        ImageView backView2 = new ImageView(backImage2);\r\n\r\n        backView.setFitHeight(80);\r\n        backView.setFitWidth(80);\r\n        backView2.setFitHeight(80);\r\n        backView2.setFitWidth(80);\r\n\r\n        Button backButton = new Button();\r\n        backButton.setTranslateX(0);\r\n        backButton.setTranslateY(0);\r\n        backButton.setPrefSize(80, 80);\r\n        backButton.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        backButton.setGraphic(backView);\r\n\r\n        backButton.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                backButton.setGraphic(backView2);\r\n            } else {\r\n                backButton.setGraphic(backView);\r\n            }\r\n        });\r\n        backButton.setOnAction(event -> {\r\n            stage.setScene(scene1);\r\n            setupRuleView.setTranslateY(-500);\r\n            rightButtonSetup.setTranslateY(-415);\r\n\r\n//            setupRuleView.setTranslateY(-500);\r\n//            rightButtonSetup.setTranslateX(740);\r\n//            rightButtonSetup.setTranslateY(-415);\r\n        });\r\n        \r\n        scene3 = new Scene(new Pane(helpView, setupRuleView, rightButtonSetup, backButton));\r\n\r\n\r\n        // help scene - scene4\r\n        Image helpMenuImage1 = new Image(getClass().getResource(\"gui/asset/MenuScene.png\").toExternalForm());\r\n        ImageView helpView1 = new ImageView(helpMenuImage1);\r\n        helpView.setY(0);\r\n        helpView.setX(0);\r\n\r\n        // rule board\r\n        Image scatteringRule = new Image(\"gui/asset/Scattering.png\");\r\n        ImageView scatteringRuleView = new ImageView(scatteringRule);\r\n        scatteringRuleView.setTranslateX(0);\r\n        scatteringRuleView.setTranslateY(-500);\r\n\r\n//        // right button\r\n        Image rightImageScattering = new Image(\"gui/asset/RIGHT.png\");\r\n        ImageView rightViewScattering = new ImageView(rightImageScattering);\r\n        Image rightImageScattering2 = new Image(\"gui/asset/RIGHT2.png\");\r\n        ImageView rightViewScattering2 = new ImageView(rightImageScattering2);\r\n\r\n        rightViewScattering.setFitHeight(80);\r\n        rightViewScattering.setFitWidth(80);\r\n        rightViewScattering2.setFitHeight(80);\r\n        rightViewScattering2.setFitWidth(80);\r\n\r\n        Button rightButtonScattering = new Button();\r\n        rightButtonScattering.setTranslateX(725);\r\n        rightButtonScattering.setTranslateY(-410);\r\n        rightButtonScattering.setPrefSize(80, 80);\r\n        rightButtonScattering.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        rightButtonScattering.setGraphic(rightViewScattering);\r\n        \r\n     // left button scattering\r\n        Image leftImageScattering = new Image(\"gui/asset/LEFT.png\");\r\n        ImageView leftViewScattering = new ImageView(leftImageScattering);\r\n        Image leftImageScattering2 = new Image(\"gui/asset/LEFT2.png\");\r\n        ImageView leftViewScattering2 = new ImageView(leftImageScattering2);\r\n\r\n        leftViewScattering.setFitHeight(80);\r\n        leftViewScattering.setFitWidth(80);\r\n        leftViewScattering2.setFitHeight(80);\r\n        leftViewScattering2.setFitWidth(80);\r\n\r\n        Button leftButtonScattering = new Button();\r\n        leftButtonScattering.setTranslateX(240);\r\n        leftButtonScattering.setTranslateY(-410);\r\n        leftButtonScattering.setPrefSize(80, 80);\r\n        leftButtonScattering.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        leftButtonScattering.setGraphic(leftViewScattering);\r\n\r\n        rightButtonScattering.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                rightButtonScattering.setGraphic(rightViewScattering2);\r\n            } else {\r\n                rightButtonScattering.setGraphic(rightViewScattering);\r\n            }\r\n        });\r\n        rightButtonScattering.setOnAction(event -> {\r\n            stage.setScene(scene5);\r\n            scatteringRuleView.setTranslateY(-500);\r\n            rightButtonScattering.setTranslateY(-410);\r\n            leftButtonScattering.setTranslateY(-410);\r\n\r\n            TranslateTransition scatteringBoardTransitionSecond = new TranslateTransition(Duration.seconds(1), ((Pane) scene5.getRoot()).getChildren().get(1));\r\n            scatteringBoardTransitionSecond.setByY(500);\r\n            scatteringBoardTransitionSecond.setInterpolator(Interpolator.EASE_OUT);\r\n            scatteringBoardTransitionSecond.play();\r\n\r\n            TranslateTransition rightTransitionScatteringSecond = new TranslateTransition(Duration.seconds(1), ((Pane) scene5.getRoot()).getChildren().get(2));\r\n            rightTransitionScatteringSecond.setInterpolator(Interpolator.EASE_OUT);\r\n            rightTransitionScatteringSecond.setByY(500);\r\n            rightTransitionScatteringSecond.play();\r\n\r\n            TranslateTransition leftTransitionScatteringSecond = new TranslateTransition(Duration.seconds(1), ((Pane) scene5.getRoot()).getChildren().get(3));\r\n            leftTransitionScatteringSecond.setInterpolator(Interpolator.EASE_OUT);\r\n            leftTransitionScatteringSecond.setByY(500);\r\n            leftTransitionScatteringSecond.play();\r\n        });\r\n\r\n        leftButtonScattering.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                leftButtonScattering.setGraphic(leftViewScattering2);\r\n            } else {\r\n                leftButtonScattering.setGraphic(leftViewScattering);\r\n            }\r\n        });\r\n        leftButtonScattering.setOnAction(event -> {\r\n            stage.setScene(scene3);\r\n            scatteringRuleView.setTranslateY(-500);\r\n            rightButtonScattering.setTranslateY(-410);\r\n            leftButtonScattering.setTranslateY(-410);\r\n\r\n            TranslateTransition setupBoardTransition = new TranslateTransition(Duration.seconds(1), ((Pane) scene3.getRoot()).getChildren().get(1));\r\n            setupBoardTransition.setByY(500);\r\n            setupBoardTransition.setInterpolator(Interpolator.EASE_OUT);\r\n            setupBoardTransition.play();\r\n\r\n            TranslateTransition rightTransitionSetup = new TranslateTransition(Duration.seconds(1), ((Pane) scene3.getRoot()).getChildren().get(2));\r\n            rightTransitionSetup.setInterpolator(Interpolator.EASE_OUT);\r\n            rightTransitionSetup.setByY(500);\r\n            rightTransitionSetup.play();\r\n        });\r\n        \r\n     // back to menu button\r\n        Image backImageScattering = new Image(\"gui/asset/BACK.png\");\r\n        ImageView backViewScattering = new ImageView(backImageScattering);\r\n        Image backImageScattering2 = new Image(\"gui/asset/BACK2.png\");\r\n        ImageView backViewScattering2 = new ImageView(backImageScattering2);\r\n\r\n        backViewScattering.setFitHeight(80);\r\n        backViewScattering.setFitWidth(80);\r\n        backViewScattering2.setFitHeight(80);\r\n        backViewScattering2.setFitWidth(80);\r\n\r\n        Button backButtonScattering = new Button();\r\n        backButtonScattering.setTranslateX(0);\r\n        backButtonScattering.setTranslateY(0);\r\n        backButtonScattering.setPrefSize(80, 80);\r\n        backButtonScattering.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        backButtonScattering.setGraphic(backViewScattering);\r\n\r\n        backButtonScattering.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                backButtonScattering.setGraphic(backViewScattering2);\r\n            } else {\r\n                backButtonScattering.setGraphic(backViewScattering);\r\n            }\r\n        });\r\n        backButtonScattering.setOnAction(event -> {\r\n            stage.setScene(scene1);\r\n            scatteringRuleView.setTranslateY(-500);\r\n            rightButtonScattering.setTranslateY(-410);\r\n            leftButtonScattering.setTranslateY(-410);\r\n        });\r\n\r\n        scene4 = new Scene(new Pane(helpView1, scatteringRuleView, rightButtonScattering, leftButtonScattering, backButtonScattering));\r\n\r\n        // 2th scattering scene - scene5\r\n        Image helpMenuImage2 = new Image(getClass().getResource(\"gui/asset/MenuScene.png\").toExternalForm());\r\n        ImageView helpView2 = new ImageView(helpMenuImage2);\r\n        helpView2.setY(0);\r\n        helpView2.setX(0);\r\n\r\n        // rule board\r\n        Image scatteringRuleSecond = new Image(\"gui/asset/Scattering2.png\");\r\n        ImageView scatteringRuleViewSecond = new ImageView(scatteringRuleSecond);\r\n        scatteringRuleViewSecond.setTranslateX(0);\r\n        scatteringRuleViewSecond.setTranslateY(-500);\r\n        \r\n        // right button\r\n        Image rightImageScatteringSecond = new Image(\"gui/asset/RIGHT.png\");\r\n        ImageView rightViewScatteringSecond = new ImageView(rightImageScatteringSecond);\r\n        Image rightImageScatteringSecond2 = new Image(\"gui/asset/RIGHT2.png\");\r\n        ImageView rightViewScatteringSecond2 = new ImageView(rightImageScatteringSecond2);\r\n\r\n        rightViewScatteringSecond.setFitHeight(80);\r\n        rightViewScatteringSecond.setFitWidth(80);\r\n        rightViewScatteringSecond2.setFitHeight(80);\r\n        rightViewScatteringSecond2.setFitWidth(80);\r\n\r\n        Button rightButtonScatteringSecond = new Button();\r\n        rightButtonScatteringSecond.setTranslateX(725);\r\n        rightButtonScatteringSecond.setTranslateY(-410);\r\n        rightButtonScatteringSecond.setPrefSize(80, 80);\r\n        rightButtonScatteringSecond.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        rightButtonScatteringSecond.setGraphic(rightViewScatteringSecond);\r\n        \r\n     // left button scattering\r\n        Image leftImageScatteringSecond = new Image(\"gui/asset/LEFT.png\");\r\n        ImageView leftViewScatteringSecond = new ImageView(leftImageScatteringSecond);\r\n        Image leftImageScatteringSecond2 = new Image(\"gui/asset/LEFT2.png\");\r\n        ImageView leftViewScatteringSecond2 = new ImageView(leftImageScatteringSecond2);\r\n\r\n        leftViewScatteringSecond.setFitHeight(80);\r\n        leftViewScatteringSecond.setFitWidth(80);\r\n        leftViewScatteringSecond2.setFitHeight(80);\r\n        leftViewScatteringSecond2.setFitWidth(80);\r\n\r\n        Button leftButtonScatteringSecond = new Button();\r\n        leftButtonScatteringSecond.setTranslateX(240);\r\n        leftButtonScatteringSecond.setTranslateY(-410);\r\n        leftButtonScatteringSecond.setPrefSize(80, 80);\r\n        leftButtonScatteringSecond.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        leftButtonScatteringSecond.setGraphic(leftViewScatteringSecond);\r\n\r\n        rightButtonScatteringSecond.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                rightButtonScatteringSecond.setGraphic(rightViewScatteringSecond2);\r\n            } else {\r\n                rightButtonScatteringSecond.setGraphic(rightViewScatteringSecond);\r\n            }\r\n        });\r\n        rightButtonScatteringSecond.setOnAction(event -> {\r\n            stage.setScene(scene6);\r\n            scatteringRuleViewSecond.setTranslateY(-500);\r\n            rightButtonScatteringSecond.setTranslateY(-410);\r\n            leftButtonScatteringSecond.setTranslateY(-410);\r\n\r\n            TranslateTransition capturingBoardTransition = new TranslateTransition(Duration.seconds(1), ((Pane) scene6.getRoot()).getChildren().get(1));\r\n            capturingBoardTransition.setByY(500);\r\n            capturingBoardTransition.setInterpolator(Interpolator.EASE_OUT);\r\n            capturingBoardTransition.play();\r\n\r\n            TranslateTransition rightTransitionCapturing = new TranslateTransition(Duration.seconds(1), ((Pane) scene6.getRoot()).getChildren().get(2));\r\n            rightTransitionCapturing.setInterpolator(Interpolator.EASE_OUT);\r\n            rightTransitionCapturing.setByY(500);\r\n            rightTransitionCapturing.play();\r\n\r\n            TranslateTransition leftTransitionCapturing = new TranslateTransition(Duration.seconds(1), ((Pane) scene6.getRoot()).getChildren().get(3));\r\n            leftTransitionCapturing.setInterpolator(Interpolator.EASE_OUT);\r\n            leftTransitionCapturing.setByY(500);\r\n            leftTransitionCapturing.play();\r\n        });\r\n        \r\n        leftButtonScatteringSecond.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                leftButtonScatteringSecond.setGraphic(leftViewScatteringSecond2);\r\n            } else {\r\n                leftButtonScatteringSecond.setGraphic(leftViewScatteringSecond);\r\n            }\r\n        });\r\n        leftButtonScatteringSecond.setOnAction(event -> {\r\n            stage.setScene(scene4);\r\n            scatteringRuleViewSecond.setTranslateY(-500);\r\n            rightButtonScatteringSecond.setTranslateY(-410);\r\n            leftButtonScatteringSecond.setTranslateY(-410);\r\n\r\n            TranslateTransition scatteringBoardTransition = new TranslateTransition(Duration.seconds(1), ((Pane) scene4.getRoot()).getChildren().get(1));\r\n            scatteringBoardTransition.setByY(500);\r\n            scatteringBoardTransition.setInterpolator(Interpolator.EASE_OUT);\r\n            scatteringBoardTransition.play();\r\n\r\n            TranslateTransition rightTransitionScattering = new TranslateTransition(Duration.seconds(1), ((Pane) scene4.getRoot()).getChildren().get(2));\r\n            rightTransitionScattering.setInterpolator(Interpolator.EASE_OUT);\r\n            rightTransitionScattering.setByY(500);\r\n            rightTransitionScattering.play();\r\n\r\n            TranslateTransition leftTransitionScattering = new TranslateTransition(Duration.seconds(1), ((Pane) scene4.getRoot()).getChildren().get(3));\r\n            leftTransitionScattering.setInterpolator(Interpolator.EASE_OUT);\r\n            leftTransitionScattering.setByY(500);\r\n            leftTransitionScattering.play();\r\n        });\r\n        \r\n     // back to menu button\r\n        Image backImageScatteringSecond = new Image(\"gui/asset/BACK.png\");\r\n        ImageView backViewScatteringSecond = new ImageView(backImageScatteringSecond);\r\n        Image backImageScatteringSecond2 = new Image(\"gui/asset/BACK2.png\");\r\n        ImageView backViewScatteringSecond2 = new ImageView(backImageScatteringSecond2);\r\n\r\n        backViewScatteringSecond.setFitHeight(80);\r\n        backViewScatteringSecond.setFitWidth(80);\r\n        backViewScatteringSecond2.setFitHeight(80);\r\n        backViewScatteringSecond2.setFitWidth(80);\r\n\r\n        Button backButtonScatteringSecond = new Button();\r\n        backButtonScatteringSecond.setTranslateX(0);\r\n        backButtonScatteringSecond.setTranslateY(0);\r\n        backButtonScatteringSecond.setPrefSize(80, 80);\r\n        backButtonScatteringSecond.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        backButtonScatteringSecond.setGraphic(backViewScatteringSecond);\r\n\r\n        backButtonScatteringSecond.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                backButtonScatteringSecond.setGraphic(backViewScatteringSecond2);\r\n            } else {\r\n                backButtonScatteringSecond.setGraphic(backViewScatteringSecond);\r\n            }\r\n        });\r\n        backButtonScatteringSecond.setOnAction(event -> {\r\n            stage.setScene(scene1);\r\n            scatteringRuleViewSecond.setTranslateY(-500);\r\n            rightButtonScatteringSecond.setTranslateY(-410);\r\n            leftButtonScatteringSecond.setTranslateY(-410);\r\n        });\r\n\r\n        scene5 = new Scene(new Pane(helpView2, scatteringRuleViewSecond, rightButtonScatteringSecond,\r\n                leftButtonScatteringSecond, backButtonScatteringSecond));\r\n        \r\n     // capturing scene - scene6\r\n        Image helpMenuImage3 = new Image(getClass().getResource(\"gui/asset/MenuScene.png\").toExternalForm());\r\n        ImageView helpView3 = new ImageView(helpMenuImage3);\r\n        helpView3.setY(0);\r\n        helpView3.setX(0);\r\n\r\n        // rule board\r\n        Image capturingRule = new Image(\"gui/asset/Capturing.png\");\r\n        ImageView capturingRuleView = new ImageView(capturingRule);\r\n        capturingRuleView.setTranslateX(0);\r\n        capturingRuleView.setTranslateY(-500);\r\n\r\n//        // right button\r\n        Image rightImageCapturing = new Image(\"gui/asset/RIGHT.png\");\r\n        ImageView rightViewCapturing = new ImageView(rightImageCapturing);\r\n        Image rightImageCapturing2 = new Image(\"gui/asset/RIGHT2.png\");\r\n        ImageView rightViewCapturing2 = new ImageView(rightImageCapturing2);\r\n\r\n        rightViewCapturing.setFitHeight(80);\r\n        rightViewCapturing.setFitWidth(80);\r\n        rightViewCapturing2.setFitHeight(80);\r\n        rightViewCapturing2.setFitWidth(80);\r\n\r\n        Button rightButtonCapturing = new Button();\r\n        rightButtonCapturing.setTranslateX(725);\r\n        rightButtonCapturing.setTranslateY(-410);\r\n        rightButtonCapturing.setPrefSize(80, 80);\r\n        rightButtonCapturing.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        rightButtonCapturing.setGraphic(rightViewCapturing);\r\n        \r\n     // left button scattering\r\n        Image leftImageCapturing = new Image(\"gui/asset/LEFT.png\");\r\n        ImageView leftViewCapturing = new ImageView(leftImageCapturing);\r\n        Image leftImageCapturing2 = new Image(\"gui/asset/LEFT2.png\");\r\n        ImageView leftViewCapturing2 = new ImageView(leftImageCapturing2);\r\n\r\n        leftViewCapturing.setFitHeight(80);\r\n        leftViewCapturing.setFitWidth(80);\r\n        leftViewCapturing2.setFitHeight(80);\r\n        leftViewCapturing2.setFitWidth(80);\r\n\r\n        Button leftButtonCapturing = new Button();\r\n        leftButtonCapturing.setTranslateX(240);\r\n        leftButtonCapturing.setTranslateY(-410);\r\n        leftButtonCapturing.setPrefSize(80, 80);\r\n        leftButtonCapturing.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        leftButtonCapturing.setGraphic(leftViewCapturing);\r\n\r\n        rightButtonCapturing.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                rightButtonCapturing.setGraphic(rightViewCapturing2);\r\n            } else {\r\n                rightButtonCapturing.setGraphic(rightViewCapturing);\r\n            }\r\n        });\r\n        rightButtonCapturing.setOnAction(event -> {\r\n            stage.setScene(scene7);\r\n            capturingRuleView.setTranslateY(-500);\r\n            rightButtonCapturing.setTranslateY(-410);\r\n            leftButtonCapturing.setTranslateY(-410);\r\n\r\n            TranslateTransition passingBoardTransition = new TranslateTransition(Duration.seconds(1), ((Pane) scene7.getRoot()).getChildren().get(1));\r\n            passingBoardTransition.setByY(500);\r\n            passingBoardTransition.setInterpolator(Interpolator.EASE_OUT);\r\n            passingBoardTransition.play();\r\n\r\n            TranslateTransition rightTransitionPassing = new TranslateTransition(Duration.seconds(1), ((Pane) scene7.getRoot()).getChildren().get(2));\r\n            rightTransitionPassing.setInterpolator(Interpolator.EASE_OUT);\r\n            rightTransitionPassing.setByY(500);\r\n            rightTransitionPassing.play();\r\n\r\n            TranslateTransition leftTransitionPassing = new TranslateTransition(Duration.seconds(1), ((Pane) scene7.getRoot()).getChildren().get(3));\r\n            leftTransitionPassing.setInterpolator(Interpolator.EASE_OUT);\r\n            leftTransitionPassing.setByY(500);\r\n            leftTransitionPassing.play();\r\n\r\n        });\r\n\r\n        leftButtonCapturing.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                leftButtonCapturing.setGraphic(leftViewCapturing2);\r\n            } else {\r\n                leftButtonCapturing.setGraphic(leftViewCapturing);\r\n            }\r\n        });\r\n        leftButtonCapturing.setOnAction(event -> {\r\n            stage.setScene(scene5);\r\n            capturingRuleView.setTranslateY(-500);\r\n            rightButtonCapturing.setTranslateY(-410);\r\n            leftButtonCapturing.setTranslateY(-410);\r\n\r\n            TranslateTransition scatteringBoardTransitionSecond = new TranslateTransition(Duration.seconds(1), ((Pane) scene5.getRoot()).getChildren().get(1));\r\n            scatteringBoardTransitionSecond.setByY(500);\r\n            scatteringBoardTransitionSecond.setInterpolator(Interpolator.EASE_OUT);\r\n            scatteringBoardTransitionSecond.play();\r\n\r\n            TranslateTransition rightTransitionScatteringSecond = new TranslateTransition(Duration.seconds(1), ((Pane) scene5.getRoot()).getChildren().get(2));\r\n            rightTransitionScatteringSecond.setInterpolator(Interpolator.EASE_OUT);\r\n            rightTransitionScatteringSecond.setByY(500);\r\n            rightTransitionScatteringSecond.play();\r\n\r\n            TranslateTransition leftTransitionScatteringSecond = new TranslateTransition(Duration.seconds(1), ((Pane) scene5.getRoot()).getChildren().get(3));\r\n            leftTransitionScatteringSecond.setInterpolator(Interpolator.EASE_OUT);\r\n            leftTransitionScatteringSecond.setByY(500);\r\n            leftTransitionScatteringSecond.play();\r\n        });\r\n        \r\n     // back to menu button\r\n        Image backImageCapturing = new Image(\"gui/asset/BACK.png\");\r\n        ImageView backViewCapturing = new ImageView(backImageCapturing);\r\n        Image backImageCapturing2 = new Image(\"gui/asset/BACK2.png\");\r\n        ImageView backViewCapturing2 = new ImageView(backImageCapturing2);\r\n\r\n        backViewCapturing.setFitHeight(80);\r\n        backViewCapturing.setFitWidth(80);\r\n        backViewCapturing2.setFitHeight(80);\r\n        backViewCapturing2.setFitWidth(80);\r\n\r\n        Button backButtonCapturing = new Button();\r\n        backButtonCapturing.setTranslateX(0);\r\n        backButtonCapturing.setTranslateY(0);\r\n        backButtonCapturing.setPrefSize(80, 80);\r\n        backButtonCapturing.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        backButtonCapturing.setGraphic(backViewCapturing);\r\n\r\n        backButtonCapturing.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                backButtonCapturing.setGraphic(backViewCapturing2);\r\n            } else {\r\n                backButtonCapturing.setGraphic(backViewCapturing);\r\n            }\r\n        });\r\n        backButtonCapturing.setOnAction(event -> {\r\n            stage.setScene(scene1);\r\n            capturingRuleView.setTranslateY(-500);\r\n            rightButtonCapturing.setTranslateY(-410);\r\n            leftButtonCapturing.setTranslateY(-410);\r\n        });\r\n\r\n        scene6 = new Scene(new Pane(helpView3, capturingRuleView, rightButtonCapturing,\r\n                leftButtonCapturing, backButtonCapturing));\r\n\r\n        // passing scene - scene7\r\n        Image helpMenuImage4 = new Image(getClass().getResource(\"gui/asset/MenuScene.png\").toExternalForm());\r\n        ImageView helpView4 = new ImageView(helpMenuImage4);\r\n        helpView4.setY(0);\r\n        helpView4.setX(0);\r\n        \r\n     // rule board\r\n        Image passingRule = new Image(\"gui/asset/Passing.png\");\r\n        ImageView passingRuleView = new ImageView(passingRule);\r\n        passingRuleView.setTranslateX(0);\r\n        passingRuleView.setTranslateY(-500);\r\n\r\n//        // right button\r\n        Image rightImagePassing = new Image(\"gui/asset/RIGHT.png\");\r\n        ImageView rightViewPassing = new ImageView(rightImagePassing);\r\n        Image rightImagePassing2 = new Image(\"gui/asset/RIGHT2.png\");\r\n        ImageView rightViewPassing2 = new ImageView(rightImagePassing2);\r\n\r\n        rightViewPassing.setFitHeight(80);\r\n        rightViewPassing.setFitWidth(80);\r\n        rightViewPassing2.setFitHeight(80);\r\n        rightViewPassing2.setFitWidth(80);\r\n\r\n        Button rightButtonPassing = new Button();\r\n        rightButtonPassing.setTranslateX(725);\r\n        rightButtonPassing.setTranslateY(-410);\r\n        rightButtonPassing.setPrefSize(80, 80);\r\n        rightButtonPassing.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        rightButtonPassing.setGraphic(rightViewPassing);\r\n\r\n        // left button scattering\r\n        Image leftImagePassing = new Image(\"gui/asset/LEFT.png\");\r\n        ImageView leftViewPassing = new ImageView(leftImagePassing);\r\n        Image leftImagePassing2 = new Image(\"gui/asset/LEFT2.png\");\r\n        ImageView leftViewPassing2 = new ImageView(leftImagePassing2);\r\n\r\n        leftViewPassing.setFitHeight(80);\r\n        leftViewPassing.setFitWidth(80);\r\n        leftViewPassing2.setFitHeight(80);\r\n        leftViewPassing2.setFitWidth(80);\r\n\r\n        Button leftButtonPassing = new Button();\r\n        leftButtonPassing.setTranslateX(240);\r\n        leftButtonPassing.setTranslateY(-410);\r\n        leftButtonPassing.setPrefSize(80, 80);\r\n        leftButtonPassing.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        leftButtonPassing.setGraphic(leftViewPassing);\r\n\r\n        rightButtonPassing.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                rightButtonPassing.setGraphic(rightViewPassing2);\r\n            } else {\r\n                rightButtonPassing.setGraphic(rightViewPassing);\r\n            }\r\n        });\r\n        rightButtonPassing.setOnAction(event -> {\r\n            stage.setScene(scene8);\r\n            passingRuleView.setTranslateY(-500);\r\n            rightButtonPassing.setTranslateY(-410);\r\n            leftButtonPassing.setTranslateY(-410);\r\n\r\n            TranslateTransition dispatchingBoardTransition = new TranslateTransition(Duration.seconds(1), ((Pane) scene8.getRoot()).getChildren().get(1));\r\n            dispatchingBoardTransition.setByY(500);\r\n            dispatchingBoardTransition.setInterpolator(Interpolator.EASE_OUT);\r\n            dispatchingBoardTransition.play();\r\n\r\n            TranslateTransition rightTransitionDispatching = new TranslateTransition(Duration.seconds(1), ((Pane) scene8.getRoot()).getChildren().get(2));\r\n            rightTransitionDispatching.setInterpolator(Interpolator.EASE_OUT);\r\n            rightTransitionDispatching.setByY(500);\r\n            rightTransitionDispatching.play();\r\n\r\n            TranslateTransition leftTransitionDispatching = new TranslateTransition(Duration.seconds(1), ((Pane) scene8.getRoot()).getChildren().get(3));\r\n            leftTransitionDispatching.setInterpolator(Interpolator.EASE_OUT);\r\n            leftTransitionDispatching.setByY(500);\r\n            leftTransitionDispatching.play();\r\n        });\r\n        \r\n        leftButtonPassing.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                leftButtonPassing.setGraphic(leftViewPassing2);\r\n            } else {\r\n                leftButtonPassing.setGraphic(leftViewPassing);\r\n            }\r\n        });\r\n        leftButtonPassing.setOnAction(event -> {\r\n            stage.setScene(scene6);\r\n            passingRuleView.setTranslateY(-500);\r\n            rightButtonPassing.setTranslateY(-410);\r\n            leftButtonPassing.setTranslateY(-410);\r\n\r\n            TranslateTransition capturingBoardTransition = new TranslateTransition(Duration.seconds(1), ((Pane) scene6.getRoot()).getChildren().get(1));\r\n            capturingBoardTransition.setByY(500);\r\n            capturingBoardTransition.setInterpolator(Interpolator.EASE_OUT);\r\n            capturingBoardTransition.play();\r\n\r\n            TranslateTransition rightTransitionCapturing = new TranslateTransition(Duration.seconds(1), ((Pane) scene6.getRoot()).getChildren().get(2));\r\n            rightTransitionCapturing.setInterpolator(Interpolator.EASE_OUT);\r\n            rightTransitionCapturing.setByY(500);\r\n            rightTransitionCapturing.play();\r\n\r\n            TranslateTransition leftTransitionCapturing = new TranslateTransition(Duration.seconds(1), ((Pane) scene6.getRoot()).getChildren().get(3));\r\n            leftTransitionCapturing.setInterpolator(Interpolator.EASE_OUT);\r\n            leftTransitionCapturing.setByY(500);\r\n            leftTransitionCapturing.play();\r\n        });\r\n\r\n        // back to menu button\r\n        Image backImagePassing = new Image(\"gui/asset/BACK.png\");\r\n        ImageView backViewPassing = new ImageView(backImagePassing);\r\n        Image backImagePassing2 = new Image(\"gui/asset/BACK2.png\");\r\n        ImageView backViewPassing2 = new ImageView(backImagePassing2);\r\n\r\n        backViewPassing.setFitHeight(80);\r\n        backViewPassing.setFitWidth(80);\r\n        backViewPassing2.setFitHeight(80);\r\n        backViewPassing2.setFitWidth(80);\r\n\r\n        Button backButtonPassing = new Button();\r\n        backButtonPassing.setTranslateX(0);\r\n        backButtonPassing.setTranslateY(0);\r\n        backButtonPassing.setPrefSize(80, 80);\r\n        backButtonPassing.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        backButtonPassing.setGraphic(backViewPassing);\r\n\r\n        backButtonPassing.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                backButtonPassing.setGraphic(backViewPassing2);\r\n            } else {\r\n                backButtonPassing.setGraphic(backViewPassing);\r\n            }\r\n        });\r\n        backButtonPassing.setOnAction(event -> {\r\n            stage.setScene(scene1);\r\n            passingRuleView.setTranslateY(-500);\r\n            rightButtonPassing.setTranslateY(-410);\r\n            leftButtonPassing.setTranslateY(-410);\r\n        });\r\n\r\n        scene7 = new Scene(new Pane(helpView4, passingRuleView, rightButtonPassing,\r\n                leftButtonPassing, backButtonPassing));\r\n        \r\n     // dispatching scene - scene8\r\n        Image helpMenuImage5 = new Image(getClass().getResource(\"gui/asset/MenuScene.png\").toExternalForm());\r\n        ImageView helpView5 = new ImageView(helpMenuImage5);\r\n        helpView5.setY(0);\r\n        helpView5.setX(0);\r\n\r\n        // rule board\r\n        Image dispatchingRule = new Image(\"gui/asset/Dispatching.png\");\r\n        ImageView dispatchingRuleView = new ImageView(dispatchingRule);\r\n        dispatchingRuleView.setTranslateX(0);\r\n        dispatchingRuleView.setTranslateY(-500);\r\n\r\n//        // right button\r\n        Image rightImageDispatching = new Image(\"gui/asset/RIGHT.png\");\r\n        ImageView rightViewDispatching = new ImageView(rightImageDispatching);\r\n        Image rightImageDispatching2 = new Image(\"gui/asset/RIGHT2.png\");\r\n        ImageView rightViewDispatching2 = new ImageView(rightImageDispatching2);\r\n\r\n        rightViewDispatching.setFitHeight(80);\r\n        rightViewDispatching.setFitWidth(80);\r\n        rightViewDispatching2.setFitHeight(80);\r\n        rightViewDispatching2.setFitWidth(80);\r\n\r\n        Button rightButtonDispatching = new Button();\r\n        rightButtonDispatching.setTranslateX(725);\r\n        rightButtonDispatching.setTranslateY(-410);\r\n        rightButtonDispatching.setPrefSize(80, 80);\r\n        rightButtonDispatching.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        rightButtonDispatching.setGraphic(rightViewDispatching);\r\n\r\n        // left button scattering\r\n        Image leftImageDispatching = new Image(\"gui/asset/LEFT.png\");\r\n        ImageView leftViewDispatching = new ImageView(leftImageDispatching);\r\n        Image leftImageDispatching2 = new Image(\"gui/asset/LEFT2.png\");\r\n        ImageView leftViewDispatching2 = new ImageView(leftImageDispatching2);\r\n\r\n        leftViewDispatching.setFitHeight(80);\r\n        leftViewDispatching.setFitWidth(80);\r\n        leftViewDispatching2.setFitHeight(80);\r\n        leftViewDispatching2.setFitWidth(80);\r\n\r\n        Button leftButtonDispatching = new Button();\r\n        leftButtonDispatching.setTranslateX(240);\r\n        leftButtonDispatching.setTranslateY(-410);\r\n        leftButtonDispatching.setPrefSize(80, 80);\r\n        leftButtonDispatching.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        leftButtonDispatching.setGraphic(leftViewDispatching);\r\n\r\n        rightButtonDispatching.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                rightButtonDispatching.setGraphic(rightViewDispatching2);\r\n            } else {\r\n                rightButtonDispatching.setGraphic(rightViewDispatching);\r\n            }\r\n        });\r\n        rightButtonDispatching.setOnAction(event -> {\r\n            stage.setScene(scene9);\r\n            dispatchingRuleView.setTranslateY(-500);\r\n            rightButtonDispatching.setTranslateY(-410);\r\n            leftButtonDispatching.setTranslateY(-410);\r\n\r\n            TranslateTransition winningBoardTransition = new TranslateTransition(Duration.seconds(1), ((Pane) scene9.getRoot()).getChildren().get(1));\r\n            winningBoardTransition.setByY(500);\r\n            winningBoardTransition.setInterpolator(Interpolator.EASE_OUT);\r\n            winningBoardTransition.play();\r\n\r\n            TranslateTransition rightTransitionWinning = new TranslateTransition(Duration.seconds(1), ((Pane) scene9.getRoot()).getChildren().get(2));\r\n            rightTransitionWinning.setInterpolator(Interpolator.EASE_OUT);\r\n            rightTransitionWinning.setByY(500);\r\n            rightTransitionWinning.play();\r\n        });\r\n\r\n        leftButtonDispatching.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                leftButtonDispatching.setGraphic(leftViewDispatching2);\r\n            } else {\r\n                leftButtonDispatching.setGraphic(leftViewDispatching);\r\n            }\r\n        });\r\n        leftButtonDispatching.setOnAction(event -> {\r\n            stage.setScene(scene7);\r\n            dispatchingRuleView.setTranslateY(-500);\r\n            rightButtonDispatching.setTranslateY(-410);\r\n            leftButtonDispatching.setTranslateY(-410);\r\n\r\n            TranslateTransition passingBoardTransition = new TranslateTransition(Duration.seconds(1), ((Pane) scene7.getRoot()).getChildren().get(1));\r\n            passingBoardTransition.setByY(500);\r\n            passingBoardTransition.setInterpolator(Interpolator.EASE_OUT);\r\n            passingBoardTransition.play();\r\n\r\n            TranslateTransition rightTransitionPassing = new TranslateTransition(Duration.seconds(1), ((Pane) scene7.getRoot()).getChildren().get(2));\r\n            rightTransitionPassing.setInterpolator(Interpolator.EASE_OUT);\r\n            rightTransitionPassing.setByY(500);\r\n            rightTransitionPassing.play();\r\n\r\n            TranslateTransition leftTransitionPassing = new TranslateTransition(Duration.seconds(1), ((Pane) scene7.getRoot()).getChildren().get(3));\r\n            leftTransitionPassing.setInterpolator(Interpolator.EASE_OUT);\r\n            leftTransitionPassing.setByY(500);\r\n            leftTransitionPassing.play();\r\n        });\r\n        \r\n     // back to menu button\r\n        Image backImageDispatching = new Image(\"gui/asset/BACK.png\");\r\n        ImageView backViewDispatching = new ImageView(backImageDispatching);\r\n        Image backImageDispatching2 = new Image(\"gui/asset/BACK2.png\");\r\n        ImageView backViewDispatching2 = new ImageView(backImageDispatching2);\r\n\r\n        backViewDispatching.setFitHeight(80);\r\n        backViewDispatching.setFitWidth(80);\r\n        backViewDispatching2.setFitHeight(80);\r\n        backViewDispatching2.setFitWidth(80);\r\n\r\n        Button backButtonDispatching = new Button();\r\n        backButtonDispatching.setTranslateX(0);\r\n        backButtonDispatching.setTranslateY(0);\r\n        backButtonDispatching.setPrefSize(80, 80);\r\n        backButtonDispatching.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        backButtonDispatching.setGraphic(backViewDispatching);\r\n\r\n        backButtonDispatching.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                backButtonDispatching.setGraphic(backViewDispatching2);\r\n            } else {\r\n                backButtonDispatching.setGraphic(backViewDispatching);\r\n            }\r\n        });\r\n        backButtonDispatching.setOnAction(event -> {\r\n            stage.setScene(scene1);\r\n            dispatchingRuleView.setTranslateY(-500);\r\n            rightButtonDispatching.setTranslateY(-410);\r\n            leftButtonDispatching.setTranslateY(-410);\r\n        });\r\n\r\n        scene8 = new Scene(new Pane(helpView5, dispatchingRuleView, rightButtonDispatching,\r\n                leftButtonDispatching, backButtonDispatching));\r\n\r\n\r\n        // winning scene - scene9\r\n        Image helpMenuImage6 = new Image(getClass().getResource(\"gui/asset/MenuScene.png\").toExternalForm());\r\n        ImageView helpView6 = new ImageView(helpMenuImage6);\r\n        helpView6.setY(0);\r\n        helpView6.setX(0);\r\n\r\n        // rule board\r\n        Image winningRule = new Image(\"gui/asset/Winning.png\");\r\n        ImageView winningRuleView = new ImageView(winningRule);\r\n        winningRuleView.setTranslateX(0);\r\n        winningRuleView.setTranslateY(-500);\r\n\r\n        // left button scattering\r\n        Image leftImageWinning = new Image(\"gui/asset/LEFT.png\");\r\n        ImageView leftViewWinning = new ImageView(leftImageWinning);\r\n        Image leftImageWinning2 = new Image(\"gui/asset/LEFT2.png\");\r\n        ImageView leftViewWinning2 = new ImageView(leftImageWinning2);\r\n\r\n        leftViewWinning.setFitHeight(80);\r\n        leftViewWinning.setFitWidth(80);\r\n        leftViewWinning2.setFitHeight(80);\r\n        leftViewWinning2.setFitWidth(80);\r\n\r\n        Button leftButtonWinning = new Button();\r\n        leftButtonWinning.setTranslateX(240);\r\n        leftButtonWinning.setTranslateY(-410);\r\n        leftButtonWinning.setPrefSize(80, 80);\r\n        leftButtonWinning.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        leftButtonWinning.setGraphic(leftViewWinning);\r\n\r\n        leftButtonWinning.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                leftButtonWinning.setGraphic(leftViewWinning2);\r\n            } else {\r\n                leftButtonWinning.setGraphic(leftViewWinning);\r\n            }\r\n        });\r\n        \r\n        leftButtonWinning.setOnAction(event -> {\r\n            stage.setScene(scene8);\r\n            winningRuleView.setTranslateY(-500);\r\n            leftButtonWinning.setTranslateY(-410);\r\n\r\n            TranslateTransition dispatchingBoardTransition = new TranslateTransition(Duration.seconds(1), ((Pane) scene8.getRoot()).getChildren().get(1));\r\n            dispatchingBoardTransition.setByY(500);\r\n            dispatchingBoardTransition.setInterpolator(Interpolator.EASE_OUT);\r\n            dispatchingBoardTransition.play();\r\n\r\n            TranslateTransition rightTransitionDispatching = new TranslateTransition(Duration.seconds(1), ((Pane) scene8.getRoot()).getChildren().get(2));\r\n            rightTransitionDispatching.setInterpolator(Interpolator.EASE_OUT);\r\n            rightTransitionDispatching.setByY(500);\r\n            rightTransitionDispatching.play();\r\n\r\n            TranslateTransition leftTransitionDispatching = new TranslateTransition(Duration.seconds(1), ((Pane) scene8.getRoot()).getChildren().get(3));\r\n            leftTransitionDispatching.setInterpolator(Interpolator.EASE_OUT);\r\n            leftTransitionDispatching.setByY(500);\r\n            leftTransitionDispatching.play();\r\n        });\r\n\r\n        // back to menu button\r\n        Image backImageWinning = new Image(\"gui/asset/BACK.png\");\r\n        ImageView backViewWinning = new ImageView(backImageDispatching);\r\n        Image backImageWinning2 = new Image(\"gui/asset/BACK2.png\");\r\n        ImageView backViewWinning2 = new ImageView(backImageWinning2);\r\n\r\n        backViewWinning.setFitHeight(80);\r\n        backViewWinning.setFitWidth(80);\r\n        backViewWinning2.setFitHeight(80);\r\n        backViewWinning2.setFitWidth(80);\r\n\r\n        Button backButtonWinning = new Button();\r\n        backButtonWinning.setTranslateX(0);\r\n        backButtonWinning.setTranslateY(0);\r\n        backButtonWinning.setPrefSize(80, 80);\r\n        backButtonWinning.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        backButtonWinning.setGraphic(backViewWinning);\r\n\r\n        backButtonWinning.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                backButtonWinning.setGraphic(backViewWinning2);\r\n            } else {\r\n                backButtonWinning.setGraphic(backViewWinning);\r\n            }\r\n        });\r\n        backButtonWinning.setOnAction(event -> {\r\n            stage.setScene(scene1);\r\n            winningRuleView.setTranslateY(-500);\r\n            leftButtonWinning.setTranslateY(-410);\r\n        });\r\n\r\n        scene9 = new Scene(new Pane(helpView6, winningRuleView,\r\n                leftButtonWinning, backButtonWinning));\r\n    }\r\n    \r\n    public void setScene(Scene scene) {\r\n    \tCanvas canvas = new Canvas(1080, 960);\r\n    \tgc = canvas.getGraphicsContext2D();\r\n    \tImage bgImage = new Image(getClass().getResource(\"gui/asset/mandarin_background.png\").toExternalForm());\r\n        ImageView img_view =  new ImageView(bgImage);\r\n        img_view.setY(0);\r\n        img_view.setX(0);\r\n        HBox Squares_row1 = new HBox(\r\n                new CitizenSquareUI(\"Square 1\",()->ChoosePivot(1),110,120,1),\r\n                new CitizenSquareUI(\"Square 2\",()->ChoosePivot(2),110,120,2),\r\n                new CitizenSquareUI(\"Square 3\",()->ChoosePivot(3),105,120,3),\r\n                new CitizenSquareUI(\"Square 4\",()->ChoosePivot(4),110,120,4),\r\n                new CitizenSquareUI(\"Square 5\",()->ChoosePivot(5),110,120,5)\r\n        );\r\n\r\n        Squares_row1.setTranslateX(210);\r\n        Squares_row1.setTranslateY(265);\r\n        HBox Squares_row2 = new HBox(\r\n                new CitizenSquareUI(\"Square 11\",()->ChoosePivot(11),110,120,11),\r\n                new CitizenSquareUI(\"Square 10\",()->ChoosePivot(10),110,120,10),\r\n                new CitizenSquareUI(\"Square 9\",()->ChoosePivot(9),105,120,9),\r\n                new CitizenSquareUI(\"Square 8\",()->ChoosePivot(8),110,120,8),\r\n                new CitizenSquareUI(\"Square 7\",()->ChoosePivot(7),110,120,7)\r\n        );\r\n        Squares_row2.setTranslateX(210);\r\n        Squares_row2.setTranslateY(395);\r\n        HBox Mandarin_Square1 = new HBox(\r\n                new CitizenSquareUI(\"Mandarin Square 6\",()->{},110,240,6)\r\n        );\r\n        Mandarin_Square1.setTranslateX(755);\r\n        Mandarin_Square1.setTranslateY(265);\r\n        HBox Mandarin_Square2 = new HBox(\r\n                new CitizenSquareUI(\"Mandarin Square 0\",()->{},110,240,0)\r\n        );\r\n        Mandarin_Square2.setTranslateX(100);\r\n        Mandarin_Square2.setTranslateY(265);\r\n        scene = new Scene(new Pane(img_view,canvas,Squares_row1,Squares_row2,Mandarin_Square1,Mandarin_Square2));\r\n    }\r\n    \r\n    private void run(GraphicsContext gc){\r\n            Image man_stone = new Image(getClass().getResource(\"gui/asset/bigstone1.png\").toExternalForm());\r\n            Image ciz_stone = new Image(getClass().getResource(\"gui/asset/stone1.png\").toExternalForm());\r\n\r\n            for (ViewStone stone : ImageHolder) {\r\n                if (stone.type == 1) {\r\n                    gc.drawImage(man_stone, stone.coordX, stone.coordY, 32, 32);\r\n                } else {\r\n                    gc.drawImage(ciz_stone, stone.coordX, stone.coordY, 16, 16);\r\n                }\r\n            }\r\n//        }\r\n\r\n    }\r\n    public static class ViewStone{\r\n        public int square_id;\r\n        public int coordX;\r\n        public int coordY;\r\n        public int type;\r\n        public ViewStone( int square_id, int coordX, int coordY,int type){\r\n            this.square_id= square_id;\r\n            this.coordX= coordX;\r\n            this.coordY= coordY;\r\n            this.type= type;\r\n        }\r\n    }\r\n    \r\n    public void loadImageHolder() {\r\n    \tint step_x= 100;\r\n        for (int i=0;i<squares.size();i++){\r\n            if (i==0) {\r\n                MandarinSquare new_square = (MandarinSquare) squares.get(i);\r\n                if (new_square.isContainMandarin()) {\r\n                    int randomNumX = ThreadLocalRandom.current().nextInt(150,210-32);\r\n                    int randomNumY = ThreadLocalRandom.current().nextInt(265,400-32);\r\n                    ImageHolder.add(new ViewStone(i,randomNumX,randomNumY,1));\r\n                }\r\n                for (int j =1;j<= squares.get(i).getNumberOfCitizens();j++){\r\n                    int randomNumX = ThreadLocalRandom.current().nextInt(150,210-32);\r\n                    int randomNumY = ThreadLocalRandom.current().nextInt(265,385-16);\r\n                    ImageHolder.add(new ViewStone(i,randomNumX,randomNumY,2));\r\n                }\r\n            }\r\n            else if (i<6){\r\n                step_x=step_x+110;\r\n                for (int j =1;j<= squares.get(i).getNumberOfCitizens();j++){\r\n                    int randomNumX = ThreadLocalRandom.current().nextInt(step_x,step_x+50-16);\r\n                    int randomNumY = ThreadLocalRandom.current().nextInt(265,320-16);\r\n                    ImageHolder.add(new ViewStone(i,randomNumX,randomNumY,2));\r\n                }\r\n            }\r\n            else if (i==6) {\r\n                step_x=step_x+110;\r\n                MandarinSquare new_square = (MandarinSquare) squares.get(i);\r\n                if (new_square.isContainMandarin()) {\r\n                    int randomNumX = ThreadLocalRandom.current().nextInt(step_x,step_x+50-32);\r\n                    int randomNumY = ThreadLocalRandom.current().nextInt(265,400-32);\r\n                    ImageHolder.add(new ViewStone(i,randomNumX,randomNumY,1));\r\n\r\n                }\r\n                for (int j =1;j<= squares.get(i).getNumberOfCitizens();j++){\r\n                    int randomNumX = ThreadLocalRandom.current().nextInt(step_x,step_x+50-32);\r\n                    int randomNumY = ThreadLocalRandom.current().nextInt(265,385-16);\r\n                    ImageHolder.add(new ViewStone(i,randomNumX,randomNumY,2));\r\n                }\r\n            }\r\n            else {\r\n                step_x=step_x-110;\r\n                for (int j =1;j<= squares.get(i).getNumberOfCitizens();j++){\r\n                    int randomNumX = ThreadLocalRandom.current().nextInt(step_x,step_x+50-16);\r\n                    int randomNumY = ThreadLocalRandom.current().nextInt(395,445-16);\r\n                    ImageHolder.add(new ViewStone(i,randomNumX,randomNumY,2));\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    \r\n    public void setup(){\r\n        CitizenSquare CS1 = new CitizenSquare(1, 0);\r\n        CitizenSquare CS2 = new CitizenSquare(2, 0);\r\n        CitizenSquare CS3 = new CitizenSquare(3, 0);\r\n        CitizenSquare CS4 = new CitizenSquare(4, 0);\r\n        CitizenSquare CS5 = new CitizenSquare(5, 0);\r\n        CitizenSquare CS7 = new CitizenSquare(7, 0);\r\n        CitizenSquare CS8= new CitizenSquare(8, 0);\r\n        CitizenSquare CS9 = new CitizenSquare(9, 1);\r\n        CitizenSquare CS10 = new CitizenSquare(10, 0);\r\n        CitizenSquare CS11 = new CitizenSquare(11, 0);\r\n\r\n        MandarinSquare MQ0=  new MandarinSquare(0, 0, false);\r\n        MandarinSquare MQ6=  new MandarinSquare(6, 0, true);\r\n        squares = new ArrayList<BoardSquare>();\r\n        squares.add(MQ0);\r\n        squares.add(CS1);\r\n        squares.add(CS2);\r\n        squares.add(CS3);\r\n        squares.add(CS4);\r\n        squares.add(CS5);\r\n        squares.add(MQ6);\r\n        squares.add(CS7);\r\n        squares.add(CS8);\r\n        squares.add(CS9);\r\n        squares.add(CS10);\r\n        squares.add(CS11);\r\n        Board MainBoard =  new Board(squares);\r\n        Player player1 =  new Player(1,0);\r\n        Player player2 = new Player(2,0);\r\n        MainGame =  new Game(MainBoard,player1,player2, true);\r\n        \r\n        loadImageHolder();\r\n\r\n        ArrayList<BoardSquare> validsquare1 = new ArrayList<BoardSquare>();\r\n        validsquare1.add(CS11);\r\n        validsquare1.add(CS10);\r\n        validsquare1.add(CS9);\r\n        validsquare1.add(CS8);\r\n        validsquare1.add(CS7);\r\n        player1.setValidBoardSquare(validsquare1);\r\n\r\n        ArrayList<BoardSquare> validsquare2 = new ArrayList<BoardSquare>();\r\n        validsquare2.add(CS1);\r\n        validsquare2.add(CS2);\r\n        validsquare2.add(CS3);\r\n        validsquare2.add(CS4);\r\n        validsquare2.add(CS5);\r\n        player2.setValidBoardSquare(validsquare2);\r\n    }\r\n\r\n\r\n\r\n    public void ShowInvalidMove(int player_id) {\r\n    \tJOptionPane.showMessageDialog(null, \"Please choose another square\", \"Invalid chosen square\", JOptionPane.ERROR_MESSAGE);\r\n    }\r\n    \r\n    public void chooseDirection(Player player, int id) {\r\n    \tJPanel direction_panel = new JPanel();\r\n        JLabel label1 = new JLabel(\"What directions do you want to choose?\");\r\n        JButton buttonLeft = new JButton(\"Left\");\r\n        JButton buttonRight = new JButton(\"Right\");\r\n\r\n        frame = new JFrame(\"Choose directions\");\r\n        direction_panel.add(label1);\r\n        direction_panel.add(buttonLeft);\r\n        direction_panel.add(buttonRight);\r\n        frame.add(direction_panel);\r\n        frame.setSize(300, 100);\r\n        frame.setLocationRelativeTo(null);\r\n        frame.setVisible(true);\r\n        if(player.getPlayerID()==1) {\r\n        \tbuttonLeft.addActionListener(new ActionListener() {\r\n                @Override\r\n                public void actionPerformed(ActionEvent e) {\r\n                    if (e.getSource() == buttonLeft) {\r\n                        frame.setVisible(false);\r\n                        makeMove(MainGame.getMyBoard(), id, true, player);\r\n                    }\r\n                }\r\n            });\r\n            buttonRight.addActionListener(new ActionListener() {\r\n                @Override\r\n                public void actionPerformed(ActionEvent e) {\r\n                    if (e.getSource() == buttonRight) {\r\n                        frame.setVisible(false);\r\n                        makeMove(MainGame.getMyBoard(), id, false, player);\r\n\r\n                    }\r\n                }\r\n            });\r\n        }else {\r\n        \tbuttonLeft.addActionListener(new ActionListener() {\r\n                @Override\r\n                public void actionPerformed(ActionEvent e) {\r\n                    if (e.getSource() == buttonLeft) {\r\n                        frame.setVisible(false);\r\n                        makeMove(MainGame.getMyBoard(), id, false, player);\r\n                    }\r\n                }\r\n            });\r\n            buttonRight.addActionListener(new ActionListener() {\r\n                @Override\r\n                public void actionPerformed(ActionEvent e) {\r\n                    if (e.getSource() == buttonRight) {\r\n                        frame.setVisible(false);\r\n                        makeMove(MainGame.getMyBoard(), id, true, player);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public void ChoosePivot(int id) {\r\n        if (MainGame.isP1Turn()) {\r\n            if (MainGame.getPlayer1().isValidMove(MainGame.getMyBoard(), id)) {\r\n            \tchooseDirection(MainGame.getPlayer1(), id);\r\n            } else {\r\n            \tSystem.out.println(\"Invalid Move player 1\");\r\n                ShowInvalidMove(1);\r\n            }\r\n        } else {\r\n            if (MainGame.getPlayer2().isValidMove(MainGame.getMyBoard(), id)) {\r\n            \tchooseDirection(MainGame.getPlayer2(), id);            }\r\n            else {\r\n            \tSystem.out.println(\"Invalid Move player 2\");\r\n                ShowInvalidMove(2);\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    public void collectCitizen(int squareID){\r\n        for ( int i= ImageHolder.size()-1;i>=0;i--){\r\n            if (ImageHolder.get(i).square_id== squareID){\r\n                if (ImageHolder.get(i).type==2) gc.clearRect(ImageHolder.get(i).coordX, ImageHolder.get(i).coordY, 16,16);\r\n                else gc.clearRect(ImageHolder.get(i).coordX, ImageHolder.get(i).coordY, 32,32);\r\n                ImageHolder.remove(i);\r\n            }\r\n        }\r\n    }\r\n    public void distributeCitizen(int squareID){\r\n        if (squareID==0) {\r\n                int randomNumX = ThreadLocalRandom.current().nextInt(150,210-32);\r\n                int randomNumY = ThreadLocalRandom.current().nextInt(265,400-32);\r\n                ImageHolder.add(new ViewStone(squareID,randomNumX,randomNumY,2));\r\n            }\r\n        else if (squareID<6){\r\n            int randomNumX = ThreadLocalRandom.current().nextInt(150+ squareID* 110, 210+ squareID*110-32);\r\n            int randomNumY = ThreadLocalRandom.current().nextInt(265, 400-32);\r\n                ImageHolder.add(new ViewStone(squareID,randomNumX,randomNumY,2));\r\n        }\r\n        else if (squareID==6) {\r\n            int randomNumX = ThreadLocalRandom.current().nextInt(150 + squareID * 110, 150 + squareID * 110 + 50 - 32);\r\n            int randomNumY = ThreadLocalRandom.current().nextInt(265, 400 - 32);\r\n            ImageHolder.add(new ViewStone(squareID, randomNumX, randomNumY, 2));\r\n        }\r\n        else {\r\n                int randomNumX = ThreadLocalRandom.current().nextInt(150+ (12-squareID)*110,150+(12-squareID)*110+50-16);\r\n                int randomNumY = ThreadLocalRandom.current().nextInt(395,445-16);\r\n                ImageHolder.add(new ViewStone(squareID,randomNumX,randomNumY,2));\r\n        }\r\n    }\r\n    \r\n\tpublic void dispatchCitizens(Board b, Player player) {\r\n\t\tboolean flag = false;\r\n\t\tint currentSquareID;\r\n\t\tBoardSquare currentSquare;\r\n\t\tfor (BoardSquare i : player.getValidBoardSquare()) {\r\n\t\t\tcurrentSquareID = i.getboardSquareID();\r\n\t\t\tif (b.getListOfSquare().get(currentSquareID).isEmpty() == false) {\r\n\t\t\t\tflag = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Dispatch the previous-won citizens when there are not any non-empty citizen squares\r\n\t\tArrayList<BoardSquare> listOfSquare = b.getListOfSquare();\r\n\t\tif (flag == false) {\r\n\t\t\t\tplayer.setPoint(player.getPoint()-5);\r\n\t\t\t\tfor (BoardSquare i : player.getValidBoardSquare()) {\r\n\t\t\t\t\tcurrentSquareID = i.getboardSquareID();\r\n\t\t\t\t\tcurrentSquare = listOfSquare.get(currentSquareID);\r\n\t\t\t\t\tcurrentSquare.setNumberOfCitizens(1);\r\n\t\t\t\t\tlistOfSquare.set(currentSquareID, currentSquare);\r\n\t\t\t\t\tdistributeCitizen(currentSquareID);\r\n\t\t\t\t}\r\n\t\t\tb.setListOfSquare(listOfSquare);\r\n\t\t}\r\n\t\tSystem.out.println(\"Dispatch citizen of player \" + player.getPlayerID());\r\n\t}\r\n    public void makeMove(Board b, int choosenSquareID, boolean isLeftMove, Player player) {\r\n            // Start to make move\r\n            ArrayList<BoardSquare> bss = b.getListOfSquare();\r\n            BoardSquare choosenSquare = b.getListOfSquare().get(choosenSquareID);\r\n            int citizens = choosenSquare.getNumberOfCitizens();\r\n            int currentSquareID = choosenSquareID;\r\n            choosenSquare.setNumberOfCitizens(0);\r\n            collectCitizen(currentSquareID);\r\n            bss.set(currentSquareID, choosenSquare);\r\n\r\n            while(citizens>0) {\r\n            \tSystem.out.println(citizens);\r\n                try{\r\n                Thread.sleep(500);}\r\n                catch(InterruptedException e) {\r\n                    System.out.println(\"Error@##\");\r\n                }\r\n\r\n                citizens--;\r\n                if(isLeftMove == true) {\r\n                    if(currentSquareID == 11) currentSquareID = 0;\r\n                    else currentSquareID++;\r\n                    bss.get(currentSquareID).setNumberOfCitizens(bss.get(currentSquareID).getNumberOfCitizens()+1);\r\n                }else {\r\n                    if(currentSquareID == 0) currentSquareID = 11;\r\n                    else currentSquareID--;\r\n                    bss.get(currentSquareID).setNumberOfCitizens(bss.get(currentSquareID).getNumberOfCitizens()+1);\r\n                }\r\n                distributeCitizen(currentSquareID);\r\n\r\n                // decide if the turn is continued or stopped (get point or not)\r\n                if(citizens==0) {\r\n                    if(isLeftMove == true) {\r\n                        if(currentSquareID == 11) currentSquareID = 0;\r\n                        else currentSquareID++;\r\n                        // Capture or continue the turn\r\n                        \r\n                        boolean flag = true;\r\n                        \r\n                        while(bss.get(currentSquareID).isEmpty()) {\r\n                        \tSystem.out.println(\"Capture square\");\r\n                        \tint targetSquareID;\r\n                        \tif(currentSquareID == 11) targetSquareID = 0;\r\n                        \telse targetSquareID = currentSquareID+1;\r\n                        \tif(bss.get(targetSquareID).isEmpty()==false) {\r\n                        \t\tplayer.captureSquare(bss, currentSquareID, isLeftMove);\r\n                                try{\r\n                                    Thread.sleep(500);}\r\n                                catch(InterruptedException e) {\r\n                                    System.out.println(\"Error@##\");\r\n                                }\r\n                        \t\tcollectCitizen(targetSquareID);\r\n                                if(currentSquareID==11) currentSquareID = 1;\r\n                            \telse if(currentSquareID == 10) currentSquareID = 0;\r\n                            \telse currentSquareID += 2;\r\n                        \t}else break;\r\n                        \tflag = false;\r\n                        }\r\n                        if(flag == false) break;\r\n                        \r\n                        if(bss.get(currentSquareID) instanceof CitizenSquare) {\r\n                        \tSystem.out.println(\"Continue\");\r\n                        \tBoardSquare currentSquare = (CitizenSquare) bss.get(currentSquareID);\r\n                        \tcitizens = currentSquare.getNumberOfCitizens();\r\n                            try{\r\n                                Thread.sleep(500);}\r\n                            catch(InterruptedException e) {\r\n                                System.out.println(\"Error@##\");\r\n                            }\r\n                            collectCitizen(currentSquareID);\r\n                            currentSquare.setNumberOfCitizens(0);\r\n                            bss.set(currentSquareID, currentSquare);\r\n                        }\r\n                    }else {\r\n                        if(currentSquareID == 0) currentSquareID = 11;\r\n                        else currentSquareID--;\r\n                        // Capture or continue the turn\r\n                        \r\n                        boolean flag = true;\r\n                        while(bss.get(currentSquareID).isEmpty()) {\r\n                        \tSystem.out.println(\"Capture square\");\r\n                        \tint targetSquareID;\r\n                        \tif(currentSquareID == 0) targetSquareID = 11;\r\n                        \telse targetSquareID = currentSquareID-1;\r\n                        \tif(bss.get(targetSquareID).isEmpty()==false) {\r\n                        \t\tplayer.captureSquare(bss, currentSquareID, isLeftMove);\r\n                                try{\r\n                                    Thread.sleep(500);}\r\n                                catch(InterruptedException e) {\r\n                                    System.out.println(\"Error@##\");\r\n                                }\r\n                        \t\tcollectCitizen(targetSquareID);\r\n                        \t\tif(currentSquareID==1) currentSquareID = 11;\r\n                            \telse if(currentSquareID == 0) currentSquareID = 10;\r\n                            \telse currentSquareID -= 2;\r\n                        \t}else break;\r\n                        \tflag = false;\r\n                        }\r\n                        if(flag == false) break;\r\n                        \r\n                        if(bss.get(currentSquareID) instanceof CitizenSquare) {\r\n                        \tSystem.out.println(\"Continue\");\r\n                        \tBoardSquare currentSquare = (CitizenSquare) bss.get(currentSquareID);\r\n                        \tcitizens = currentSquare.getNumberOfCitizens();\r\n                            try{\r\n                                Thread.sleep(500);}\r\n                            catch(InterruptedException e) {\r\n                                System.out.println(\"Error@##\");\r\n                            }\r\n                            collectCitizen(currentSquareID);\r\n                            currentSquare.setNumberOfCitizens(0);\r\n                            bss.set(currentSquareID, currentSquare);\r\n                        }\r\n                    }\r\n                }\r\n                System.out.print(currentSquareID + \" \");\r\n\r\n                ArrayList<BoardSquare> listOfSquares = bss;\r\n                for(BoardSquare i : listOfSquares) {\r\n                    if(i.getboardSquareID()==0) {\r\n                        MandarinSquare ms0 = (MandarinSquare) i;\r\n                        System.out.print(\" ( \" + ms0.getNumberOfCitizens() + \" \" + Boolean.toString(ms0.isContainMandarin()) + \" (\" + ms0.getboardSquareID() + \") | \");\r\n                    }else if(i.getboardSquareID()==6) {\r\n                        MandarinSquare ms6 = (MandarinSquare) i;\r\n                        System.out.println(\"\" + ms6.getNumberOfCitizens() + \" \" + Boolean.toString(ms6.isContainMandarin()) + \" (\" + ms6.getboardSquareID() + \") ) \");\r\n                        System.out.print(\"\\t\\t\");\r\n                    }else if(i.getboardSquareID()>=1 && i.getboardSquareID() <= 5) {\r\n                        System.out.print(i.getNumberOfCitizens() + \" (\" + i.getboardSquareID() + \") | \");\r\n                    }else break;\r\n                }\r\n                for(int i = 11; i >= 7; i--) {\r\n                    BoardSquare cb = bss.get(i);\r\n                    System.out.print(cb.getNumberOfCitizens() + \" (\" + cb.getboardSquareID() + \") | \");\r\n                }\r\n                System.out.println(\"\\n\");\r\n\r\n            }\r\n            System.out.println();\r\n\r\n            b.setListOfSquare(bss);\r\n            \r\n            if(MainGame.isEndGame()) {\r\n            \tendGameDialog();\r\n            \treturn;\r\n            }\r\n            \r\n            if(MainGame.getPlayer1().equals(player)) {\r\n            \tMainGame.setP1Turn(false);\r\n            \tdispatchCitizens(b, MainGame.getPlayer2());\r\n            }else {\r\n            \tMainGame.setP1Turn(true);\r\n            \tdispatchCitizens(b, MainGame.getPlayer1());\r\n            }\r\n            \r\n            System.out.println(\"End make move\");\r\n    }\r\n    \r\n    public void endGameDialog() {\r\n    \tJPanel dialog_panel = new JPanel();\r\n        JLabel label1 = new JLabel(\"The Game has ended\");\r\n        \r\n        JPanel buttonPanel = new JPanel();\r\n        JButton buttonLeft = new JButton(\"Restart\");\r\n        JButton buttonRight = new JButton(\"Quit game\");\r\n        buttonPanel.add(buttonLeft);\r\n        buttonPanel.add(buttonRight);\r\n        frame = new JFrame(\"End Game\");\r\n\r\n        dialog_panel.add(label1);\r\n        dialog_panel.add(buttonPanel);\r\n        frame.add(dialog_panel);\r\n        frame.setSize(300, 100);\r\n        frame.setLocationRelativeTo(null);\r\n        frame.setVisible(true);\r\n        \r\n        buttonLeft.addActionListener(new ActionListener() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\t// TODO Auto-generated method stub\r\n\t\t\t\tif(e.getSource()==buttonLeft) {\r\n\t\t\t\t\tframe.setVisible(false);\r\n\t\t\t\t\tMainGame.restart();\r\n\t\t\t\t\tfor(int i = 0; i <= 11; i++) {\r\n\t\t\t\t\t\tcollectCitizen(i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tloadImageHolder();\r\n\t\t\t\t\t\r\n\t\t\t\t\tPlatform.runLater(new Runnable() {\r\n\t\t\t\t\t    @Override\r\n\t\t\t\t\t    public void run() {\r\n\t\t\t\t\t        // do your GUI stuff here\r\n\t\t\t\t\t    \tstage.setScene(scene2);\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n        \r\n        buttonRight.addActionListener(new ActionListener() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\t// TODO Auto-generated method stub\r\n\t\t\t\tif(e.getSource()==buttonRight) {\r\n\t\t\t\t\tframe.setVisible(false);\r\n\t\t\t\t\tMainGame.restart();\r\n\t\t\t\t\tfor(int i = 0; i <= 11; i++) {\r\n\t\t\t\t\t\tcollectCitizen(i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tloadImageHolder();\r\n\t\t\t\t\tPlatform.runLater(new Runnable() {\r\n\t\t\t\t\t    @Override\r\n\t\t\t\t\t    public void run() {\r\n\t\t\t\t\t        // do your GUI stuff here\r\n\t\t\t\t\t    \tstage.setScene(scene1);\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n    }\r\n    private class CitizenSquareUI extends StackPane{\r\n        CitizenSquareUI(String name, Runnable action,int width, int height, int id) {\r\n            LinearGradient gradient = new LinearGradient(0, 0.5, 1, 0.5, true, CycleMethod.NO_CYCLE,\r\n                    new Stop(0.1, Color.web(\"black\", 0.75)),\r\n                    new Stop(1.0, Color.web(\"black\", 0.15))\r\n            );\r\n\r\n            Rectangle bg = new Rectangle(width, height);\r\n            Text text = new Text(\"Square number: \"+ id +\" \\nCurrent Citizen: \"+ Integer.toString(squares.get(id).getNumberOfCitizens()));\r\n            text.setFont(Font.font(10.0));\r\n            text.fillProperty().bind(\r\n              Bindings.when(bg.hoverProperty()).then(Color.BLUE).otherwise(Color.TRANSPARENT)\r\n            );\r\n            bg.fillProperty().bind(\r\n                    Bindings.when(hoverProperty()).then(Color.GRAY).otherwise(Color.TRANSPARENT)\r\n            );\r\n            setOnMouseClicked(e -> action.run());\r\n\r\n            getChildren().addAll(bg, text);\r\n        }\r\n\r\n    }\r\n    private Pane createStartMenu() {\r\n    \tPane root = new Pane();\r\n        root.setPrefSize(1080,720);\r\n        Image bgImage =  new Image(getClass().getResource(\"gui/asset/MenuScene.png\").toExternalForm());\r\n\r\n//         START button\r\n        Image startImage = new Image(\"gui/asset/START.png\");\r\n        ImageView startView = new ImageView(startImage);\r\n        Image startImage2 = new Image(\"gui/asset/START2.png\");\r\n        ImageView startView2 = new ImageView(startImage2);\r\n\r\n        startView.setFitHeight(80);\r\n        startView.setFitWidth(200);\r\n        startView2.setFitHeight(80);\r\n        startView2.setFitWidth(200);\r\n\r\n        Button startButton = new Button();\r\n        startButton.setTranslateX(645);\r\n        startButton.setTranslateY(200);\r\n        startButton.setPrefSize(80,80);\r\n        startButton.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        startButton.setGraphic(startView);\r\n\r\n        startButton.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                startButton.setGraphic(startView2);\r\n            } else {\r\n                startButton.setGraphic(startView);\r\n            }\r\n        });\r\n        startButton.setOnAction(event-> stage.setScene(scene2));\r\n\r\n\r\n        Image helpImage = new Image(\"gui/asset/HELP.png\");\r\n        ImageView helpView = new ImageView(helpImage);\r\n        Image helpImage2 = new Image(\"gui/asset/HELP2.png\");\r\n        ImageView helpView2 = new ImageView(helpImage2);\r\n\r\n        helpView.setFitHeight(80);\r\n        helpView.setFitWidth(200);\r\n        helpView2.setFitHeight(80);\r\n        helpView2.setFitWidth(200);\r\n\r\n        Button helpButton = new Button();\r\n        helpButton.setTranslateX(650);\r\n        helpButton.setTranslateY(300);\r\n        helpButton.setPrefSize(80,80);\r\n        helpButton.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        helpButton.setGraphic(helpView);\r\n\r\n        helpButton.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                helpButton.setGraphic(helpView2);\r\n            } else {\r\n                helpButton.setGraphic(helpView);\r\n            }\r\n        });\r\n        helpButton.setOnAction(event-> {\r\n            stage.setScene(scene3);\r\n\r\n            // transition of rule board\r\n            TranslateTransition boardTransition = new TranslateTransition(Duration.seconds(1), ((Pane)scene3.getRoot()).getChildren().get(1));\r\n            boardTransition.setByY(500);\r\n            boardTransition.setInterpolator(Interpolator.EASE_OUT);\r\n            boardTransition.play();\r\n\r\n            // move to next rule\r\n            TranslateTransition rightTransition = new TranslateTransition(Duration.seconds(1), ((Pane)scene3.getRoot()).getChildren().get(2));\r\n            rightTransition.setInterpolator(Interpolator.EASE_OUT);\r\n            rightTransition.setByY(500);\r\n            rightTransition.play();\r\n        });\r\n\r\n\r\n        Image exitImage = new Image(\"gui/asset/EXIT.png\");\r\n        ImageView exitView = new ImageView(exitImage);\r\n        Image exitImage2 = new Image(\"gui/asset/EXIT2.png\");\r\n        ImageView exitView2 = new ImageView(exitImage2);\r\n\r\n        exitView.setFitHeight(80);\r\n        exitView.setFitWidth(200);\r\n        exitView2.setFitHeight(80);\r\n        exitView2.setFitWidth(200);\r\n\r\n        Button exitButton = new Button();\r\n        exitButton.setTranslateX(650);\r\n        exitButton.setTranslateY(400);\r\n        exitButton.setPrefSize(80,80);\r\n        exitButton.setStyle(\"-fx-background-color: #ffffff00;\");\r\n        exitButton.setGraphic(exitView);\r\n\r\n        exitButton.hoverProperty().addListener((ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean show) -> {\r\n            if (show) {\r\n                exitButton.setGraphic(exitView2);\r\n            } else {\r\n                exitButton.setGraphic(exitView);\r\n            }\r\n        });\r\n        exitButton.setOnAction(event -> {Platform.exit();});\r\n\r\n\r\n//        box.setBackground(new Background(new BackgroundFill(Color.web(\"black\", 0.6),null,null)));\r\n//        box.setTranslateX(350);\r\n//        box.setTranslateY(250) ;\r\n        root.getChildren().addAll(\r\n                new ImageView(bgImage),\r\n                startButton,\r\n                helpButton,\r\n                exitButton\r\n        );\r\n        return root;\r\n    }\r\n    public void setStartGame(boolean status){\r\n        this.startGame=status;\r\n        if (!status){\r\n            stage.setScene(scene1);\r\n        }\r\n        else{\r\n            stage.setScene(scene2);\r\n        }\r\n    }\r\n//    private static class MenuItem extends StackPane {\r\n//        MenuItem(String name, Runnable action){\r\n//            LinearGradient gradient = new LinearGradient(0, 0.5, 1, 0.5, true, CycleMethod.NO_CYCLE,\r\n//                    new Stop(0.1, Color.web(\"black\",0.75)),\r\n//                    new Stop(1.0, Color.web(\"black\",0.15))\r\n//            );\r\n//\r\n//            Rectangle bg = new Rectangle(250,30,gradient);\r\n//            Text text  = new Text(name);\r\n//            text.setFont(Font.font(22.0));\r\n//            text.fillProperty().bind(\r\n//                    Bindings.when(hoverProperty()).then(Color.WHITE).otherwise(Color.GRAY)\r\n//            );\r\n//\r\n//            setOnMouseClicked(e->action.run());\r\n//            getChildren().addAll(bg, text);\r\n//\r\n//        }\r\n//    }\r\n\r\n    public static void main(String[] args){\r\n        launch(args);\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Menu.java b/src/Menu.java
--- a/src/Menu.java	(revision 298fdf7b1607728177bebe079a4240d965541598)
+++ b/src/Menu.java	(date 1717940271118)
@@ -1442,10 +1442,16 @@
             	endGameDialog();
             	return;
             }
+        Image p1TurnImage = new Image(getClass().getResource("gui/asset/P1turn.png").toExternalForm());
+        Image p2TurnImage = new Image(getClass().getResource("gui/asset/P2turn.png").toExternalForm());
+
+        ImageView p1TurnImageView = new ImageView(p1TurnImage);
+        ImageView p2TurnImageView = new ImageView(p2TurnImage);
             
             if(MainGame.getPlayer1().equals(player)) {
             	MainGame.setP1Turn(false);
             	dispatchCitizens(b, MainGame.getPlayer2());
+
             }else {
             	MainGame.setP1Turn(true);
             	dispatchCitizens(b, MainGame.getPlayer1());
Index: src/controls/board/BoardSquare.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controls.board;\r\n\r\npublic abstract class BoardSquare {\r\n    private int boardSquareID;\r\n    private int numberOfCitizens;\r\n\r\n    public BoardSquare(int BoardSquare_ID, int numberOfCitizens) {\r\n        this.boardSquareID = BoardSquare_ID;\r\n        this.numberOfCitizens = numberOfCitizens;\r\n    }\r\n\r\n\r\n\r\n    public int getboardSquareID() {\r\n        return boardSquareID;\r\n    }\r\n\r\n\r\n    public int getNumberOfCitizens() {\r\n        return this.numberOfCitizens;\r\n    }\r\n\r\n    public void setNumberOfCitizens(int i) {\r\n        this.numberOfCitizens = i;\r\n    }\r\n\r\n    abstract public boolean isEmpty();\r\n    abstract void operation();\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/controls/board/BoardSquare.java b/src/controls/board/BoardSquare.java
--- a/src/controls/board/BoardSquare.java	(revision 298fdf7b1607728177bebe079a4240d965541598)
+++ b/src/controls/board/BoardSquare.java	(date 1717940206403)
@@ -4,6 +4,7 @@
     private int boardSquareID;
     private int numberOfCitizens;
 
+
     public BoardSquare(int BoardSquare_ID, int numberOfCitizens) {
         this.boardSquareID = BoardSquare_ID;
         this.numberOfCitizens = numberOfCitizens;
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e1cb5f09-1c33-426a-a423-5e922d744247\" name=\"Changes\" comment=\"Adding GUI\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/controls/player/Player.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/controls/player/Player.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n        <option value=\"FxmlFile\" />\r\n        <option value=\"JavaFXApplication\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2ge3SKYRISoZPt4HtjBQPTMLIeD\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.Menu.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"git-widget-placeholder\": \"gui\",\r\n    \"ignore.virus.scanning.warn.message\": \"true\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/admin/Documents/GitHub/OOP-labs\",\r\n    \"onboarding.tips.debug.path\": \"D:/MandarinSquare/src/Main.java\",\r\n    \"project.structure.last.edited\": \"Libraries\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.2\",\r\n    \"settings.editor.selected.configurable\": \"preferences.JavaFX\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\MandarinSquare\\Design\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\admin\\Documents\\GitHub\\OOP-labs\" />\r\n    </key>\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.Menu\">\r\n    <configuration name=\"Menu\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Menu\" />\r\n      <module name=\"MandarinSquare\" />\r\n      <option name=\"VM_PARAMETERS\" value=\"--module-path &quot;C:\\Users\\admin\\Downloads\\openjfx-17.0.11_windows-x64_bin-sdk\\javafx-sdk-17.0.11\\lib&quot; --add-modules javafx.controls,javafx.fxml\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Unnamed\" type=\"Application\" factoryName=\"Application\" nameIsGenerated=\"true\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"openjdk-21\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <module name=\"MandarinSquare\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Unnamed\" type=\"JarApplication\" nameIsGenerated=\"true\">\r\n      <option name=\"VM_PARAMETERS\" value=\"--module-path &quot;C:\\Users\\admin\\Downloads\\openjfx-17.0.11_windows-x64_bin-sdk\\javafx-sdk-17.0.11\\lib&quot; --add-modules javafx.controls,javafx.fxml\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"C:\\Users\\admin\\Documents\\GitHub\\OOP-labs\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Unnamed\" type=\"Remote\" nameIsGenerated=\"true\">\r\n      <module name=\"MandarinSquare\" />\r\n      <option name=\"USE_SOCKET_TRANSPORT\" value=\"true\" />\r\n      <option name=\"SERVER_MODE\" value=\"false\" />\r\n      <option name=\"SHMEM_ADDRESS\" />\r\n      <option name=\"HOST\" value=\"localhost\" />\r\n      <option name=\"PORT\" value=\"5005\" />\r\n      <option name=\"AUTO_RESTART\" value=\"false\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.Unnamed\" />\r\n      <item itemvalue=\"Application.Menu\" />\r\n      <item itemvalue=\"JAR Application.Unnamed\" />\r\n      <item itemvalue=\"Remote JVM Debug.Unnamed\" />\r\n    </list>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"jdk-22-openjdk-22-3183f394aec4-bad0321e\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e1cb5f09-1c33-426a-a423-5e922d744247\" name=\"Changes\" comment=\"\" />\r\n      <created>1716044215054</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1716044215054</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"controls package\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716189782125</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716189782125</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"update design pattern\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716780845913</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716780845913</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"update design pattern\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1717563669755</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1717563669755</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"update design pattern\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1717599369998</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1717599369998</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Adding GUI\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1717600485082</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1717600485082</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Adding GUI\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1717600679719</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1717600679719</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Adding GUI\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1717692942530</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1717692942530</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"8\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"controls package\" />\r\n    <MESSAGE value=\"update design pattern\" />\r\n    <MESSAGE value=\"Adding GUI\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Adding GUI\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 298fdf7b1607728177bebe079a4240d965541598)
+++ b/.idea/workspace.xml	(date 1717940255878)
@@ -5,8 +5,13 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="e1cb5f09-1c33-426a-a423-5e922d744247" name="Changes" comment="Adding GUI">
+      <change afterPath="$PROJECT_DIR$/src/gui/asset/tay1.gif" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/gui/asset/tay2.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/libraries/lib.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/libraries/lib.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/controls/player/Player.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/controls/player/Player.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Menu.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Menu.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/controls/board/BoardSquare.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/controls/board/BoardSquare.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -25,7 +30,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="master" />
+        <entry key="$PROJECT_DIR$" value="Demo1" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -41,28 +46,30 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Application.Menu.executor": "Run",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "git-widget-placeholder": "gui",
-    "ignore.virus.scanning.warn.message": "true",
-    "kotlin-language-version-configured": "true",
-    "last_opened_file_path": "C:/Users/admin/Documents/GitHub/OOP-labs",
-    "onboarding.tips.debug.path": "D:/MandarinSquare/src/Main.java",
-    "project.structure.last.edited": "Libraries",
-    "project.structure.proportion": "0.15",
-    "project.structure.side.proportion": "0.2",
-    "settings.editor.selected.configurable": "preferences.JavaFX"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Application.Menu.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;gui&quot;,
+    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;D:/New folder (3)/OOP-labs/src/gui/asset&quot;,
+    &quot;onboarding.tips.debug.path&quot;: &quot;D:/MandarinSquare/src/Main.java&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Libraries&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.JavaFX&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
+      <recent name="D:\New folder (3)\OOP-labs\src\gui\asset" />
       <recent name="D:\MandarinSquare\Design" />
     </key>
     <key name="MoveFile.RECENT_KEYS">
+      <recent name="D:\New folder (3)\OOP-labs\src\gui\asset" />
       <recent name="C:\Users\admin\Documents\GitHub\OOP-labs" />
     </key>
     <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
@@ -73,7 +80,7 @@
     <configuration name="Menu" type="Application" factoryName="Application">
       <option name="MAIN_CLASS_NAME" value="Menu" />
       <module name="MandarinSquare" />
-      <option name="VM_PARAMETERS" value="--module-path &quot;C:\Users\admin\Downloads\openjfx-17.0.11_windows-x64_bin-sdk\javafx-sdk-17.0.11\lib&quot; --add-modules javafx.controls,javafx.fxml" />
+      <option name="VM_PARAMETERS" value="--module-path &quot;D:\openjfx-17.0.11_windows-x64_bin-sdk\javafx-sdk-17.0.11\lib&quot; --add-modules javafx.controls,javafx.fxml" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
@@ -112,6 +119,7 @@
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
+        <option value="jdk-21.0.2-openjdk-21.0.2-4caba194b151-4f524021" />
         <option value="jdk-22-openjdk-22-3183f394aec4-bad0321e" />
       </set>
     </attachedChunks>
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_X\" project-jdk-name=\"openjdk-21\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 298fdf7b1607728177bebe079a4240d965541598)
+++ b/.idea/misc.xml	(date 1717940206412)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_X" project-jdk-name="openjdk-21" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="openjdk-21" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/libraries/lib.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"libraryTable\">\r\n  <library name=\"lib\">\r\n    <CLASSES>\r\n      <root url=\"file://$USER_HOME$/Downloads/openjfx-17.0.11_windows-x64_bin-sdk/javafx-sdk-17.0.11/lib\" />\r\n    </CLASSES>\r\n    <JAVADOC />\r\n    <SOURCES />\r\n    <jarDirectory url=\"file://$USER_HOME$/Downloads/openjfx-17.0.11_windows-x64_bin-sdk/javafx-sdk-17.0.11/lib\" recursive=\"false\" />\r\n  </library>\r\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/lib.xml b/.idea/libraries/lib.xml
--- a/.idea/libraries/lib.xml	(revision 298fdf7b1607728177bebe079a4240d965541598)
+++ b/.idea/libraries/lib.xml	(date 1717940206417)
@@ -1,10 +1,10 @@
 <component name="libraryTable">
   <library name="lib">
     <CLASSES>
-      <root url="file://$USER_HOME$/Downloads/openjfx-17.0.11_windows-x64_bin-sdk/javafx-sdk-17.0.11/lib" />
+      <root url="file://$PROJECT_DIR$/../../openjfx-17.0.11_windows-x64_bin-sdk/javafx-sdk-17.0.11/lib" />
     </CLASSES>
     <JAVADOC />
     <SOURCES />
-    <jarDirectory url="file://$USER_HOME$/Downloads/openjfx-17.0.11_windows-x64_bin-sdk/javafx-sdk-17.0.11/lib" recursive="false" />
+    <jarDirectory url="file://$PROJECT_DIR$/../../openjfx-17.0.11_windows-x64_bin-sdk/javafx-sdk-17.0.11/lib" recursive="false" />
   </library>
 </component>
\ No newline at end of file
