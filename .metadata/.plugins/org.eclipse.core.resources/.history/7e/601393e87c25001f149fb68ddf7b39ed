import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.concurrent.ThreadLocalRandom;
import controls.Game;
import controls.board.Board;
import controls.board.BoardSquare;
import controls.board.CitizenSquare;
import controls.board.MandarinSquare;
import controls.player.Player;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.binding.Bindings;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.paint.CycleMethod;
import javafx.scene.paint.Stop;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.paint.LinearGradient;
import javafx.scene.shape.Rectangle;
import javafx.scene.canvas.Canvas;
import javax.swing.*;
import javax.swing.text.View;

import javafx.util.Duration;


public class Menu extends Application{
    public Stage stage;
    public Scene scene1, scene2;
    public Parent layout1, layout2;
    static JFrame frame ;
    public ArrayList<BoardSquare> squares;
    public ArrayList<ViewStone> ImageHolder = new ArrayList<>();
    public Game MainGame;
    public boolean startGame = false;
    private GraphicsContext gc;

    @Override
    public void start(Stage primarystage) throws Exception {
        layout1= createStartMenu();
        scene1 =  new Scene(layout1);
        stage = primarystage;
        stage.setScene(scene1);
        setup();
        Canvas canvas = new Canvas(1080, 960);
        gc = canvas.getGraphicsContext2D();
        Timeline timeline = new Timeline(new KeyFrame(Duration.millis(200), e -> run(gc)));
        timeline.setCycleCount(Timeline.INDEFINITE);
        timeline.play();

        stage.show();

        //layout2 = RenderUI();
        Image bgImage = new Image(getClass().getResource("gui/asset/mandarin_background.png").toExternalForm());
        ImageView img_view =  new ImageView(bgImage);
        img_view.setY(0);
        img_view.setX(0);
        HBox Squares_row1 = new HBox(
                new CitizenSquareUI("Square 1",()->ChoosePivot(1),110,120,1),
                new CitizenSquareUI("Square 2",()->ChoosePivot(2),110,120,2),
                new CitizenSquareUI("Square 3",()->ChoosePivot(3),105,120,3),
                new CitizenSquareUI("Square 4",()->ChoosePivot(4),110,120,4),
                new CitizenSquareUI("Square 5",()->ChoosePivot(5),110,120,5)
        );

        Squares_row1.setTranslateX(210);
        Squares_row1.setTranslateY(265);
        HBox Squares_row2 = new HBox(
                new CitizenSquareUI("Square 11",()->ChoosePivot(11),110,120,11),
                new CitizenSquareUI("Square 10",()->ChoosePivot(10),110,120,10),
                new CitizenSquareUI("Square 9",()->ChoosePivot(9),105,120,9),
                new CitizenSquareUI("Square 8",()->ChoosePivot(8),110,120,8),
                new CitizenSquareUI("Square 7",()->ChoosePivot(7),110,120,7)
        );
        Squares_row2.setTranslateX(210);
        Squares_row2.setTranslateY(395);
        HBox Mandarin_Square1 = new HBox(
                new CitizenSquareUI("Mandarin Square 6",()->{},110,240,6)
        );
        Mandarin_Square1.setTranslateX(755);
        Mandarin_Square1.setTranslateY(265);
        HBox Mandarin_Square2 = new HBox(
                new CitizenSquareUI("Mandarin Square 0",()->{},110,240,0)
        );
        Mandarin_Square2.setTranslateX(100);
        Mandarin_Square2.setTranslateY(265);
        scene2 = new Scene(new Pane(img_view,canvas,Squares_row1,Squares_row2,Mandarin_Square1,Mandarin_Square2));


        System.out.println("Running...");


    }
    
    public void setScene(Scene scene) {
    	Canvas canvas = new Canvas(1080, 960);
    	gc = canvas.getGraphicsContext2D();
    	Image bgImage = new Image(getClass().getResource("gui/asset/mandarin_background.png").toExternalForm());
        ImageView img_view =  new ImageView(bgImage);
        img_view.setY(0);
        img_view.setX(0);
        HBox Squares_row1 = new HBox(
                new CitizenSquareUI("Square 1",()->ChoosePivot(1),110,120,1),
                new CitizenSquareUI("Square 2",()->ChoosePivot(2),110,120,2),
                new CitizenSquareUI("Square 3",()->ChoosePivot(3),105,120,3),
                new CitizenSquareUI("Square 4",()->ChoosePivot(4),110,120,4),
                new CitizenSquareUI("Square 5",()->ChoosePivot(5),110,120,5)
        );

        Squares_row1.setTranslateX(210);
        Squares_row1.setTranslateY(265);
        HBox Squares_row2 = new HBox(
                new CitizenSquareUI("Square 11",()->ChoosePivot(11),110,120,11),
                new CitizenSquareUI("Square 10",()->ChoosePivot(10),110,120,10),
                new CitizenSquareUI("Square 9",()->ChoosePivot(9),105,120,9),
                new CitizenSquareUI("Square 8",()->ChoosePivot(8),110,120,8),
                new CitizenSquareUI("Square 7",()->ChoosePivot(7),110,120,7)
        );
        Squares_row2.setTranslateX(210);
        Squares_row2.setTranslateY(395);
        HBox Mandarin_Square1 = new HBox(
                new CitizenSquareUI("Mandarin Square 6",()->{},110,240,6)
        );
        Mandarin_Square1.setTranslateX(755);
        Mandarin_Square1.setTranslateY(265);
        HBox Mandarin_Square2 = new HBox(
                new CitizenSquareUI("Mandarin Square 0",()->{},110,240,0)
        );
        Mandarin_Square2.setTranslateX(100);
        Mandarin_Square2.setTranslateY(265);
        scene = new Scene(new Pane(img_view,canvas,Squares_row1,Squares_row2,Mandarin_Square1,Mandarin_Square2));
    }
    
    private void run(GraphicsContext gc){
            Image man_stone = new Image(getClass().getResource("gui/asset/bigstone1.png").toExternalForm());
            Image ciz_stone = new Image(getClass().getResource("gui/asset/stone1.png").toExternalForm());

            for (ViewStone stone : ImageHolder) {
                if (stone.type == 1) {
                    gc.drawImage(man_stone, stone.coordX, stone.coordY, 32, 32);
                } else {
                    gc.drawImage(ciz_stone, stone.coordX, stone.coordY, 16, 16);
                }
            }
//        }

    }
    public static class ViewStone{
        public int square_id;
        public int coordX;
        public int coordY;
        public int type;
        public ViewStone( int square_id, int coordX, int coordY,int type){
            this.square_id= square_id;
            this.coordX= coordX;
            this.coordY= coordY;
            this.type= type;
        }
    }
    
    public void loadImageHolder() {
    	int step_x= 100;
        for (int i=0;i<squares.size();i++){
            if (i==0) {
                MandarinSquare new_square = (MandarinSquare) squares.get(i);
                if (new_square.isContainMandarin()) {
                    int randomNumX = ThreadLocalRandom.current().nextInt(150,210-32);
                    int randomNumY = ThreadLocalRandom.current().nextInt(265,400-32);
                    ImageHolder.add(new ViewStone(i,randomNumX,randomNumY,1));
                }
                for (int j =1;j<= squares.get(i).getNumberOfCitizens();j++){
                    int randomNumX = ThreadLocalRandom.current().nextInt(150,210-32);
                    int randomNumY = ThreadLocalRandom.current().nextInt(265,385-16);
                    ImageHolder.add(new ViewStone(i,randomNumX,randomNumY,2));
                }
            }
            else if (i<6){
                step_x=step_x+110;
                for (int j =1;j<= squares.get(i).getNumberOfCitizens();j++){
                    int randomNumX = ThreadLocalRandom.current().nextInt(step_x,step_x+50-16);
                    int randomNumY = ThreadLocalRandom.current().nextInt(265,320-16);
                    ImageHolder.add(new ViewStone(i,randomNumX,randomNumY,2));
                }
            }
            else if (i==6) {
                step_x=step_x+110;
                MandarinSquare new_square = (MandarinSquare) squares.get(i);
                if (new_square.isContainMandarin()) {
                    int randomNumX = ThreadLocalRandom.current().nextInt(step_x,step_x+50-32);
                    int randomNumY = ThreadLocalRandom.current().nextInt(265,400-32);
                    ImageHolder.add(new ViewStone(i,randomNumX,randomNumY,1));

                }
                for (int j =1;j<= squares.get(i).getNumberOfCitizens();j++){
                    int randomNumX = ThreadLocalRandom.current().nextInt(step_x,step_x+50-32);
                    int randomNumY = ThreadLocalRandom.current().nextInt(265,385-16);
                    ImageHolder.add(new ViewStone(i,randomNumX,randomNumY,2));
                }
            }
            else {
                step_x=step_x-110;
                for (int j =1;j<= squares.get(i).getNumberOfCitizens();j++){
                    int randomNumX = ThreadLocalRandom.current().nextInt(step_x,step_x+50-16);
                    int randomNumY = ThreadLocalRandom.current().nextInt(395,445-16);
                    ImageHolder.add(new ViewStone(i,randomNumX,randomNumY,2));
                }
            }
        }

    }
    
    public void setup(){
        CitizenSquare CS1 = new CitizenSquare(1, 0);
        CitizenSquare CS2 = new CitizenSquare(2, 0);
        CitizenSquare CS3 = new CitizenSquare(3, 0);
        CitizenSquare CS4 = new CitizenSquare(4, 0);
        CitizenSquare CS5 = new CitizenSquare(5, 0);
        CitizenSquare CS7 = new CitizenSquare(7, 1);
        CitizenSquare CS8= new CitizenSquare(8, 0);
        CitizenSquare CS9 = new CitizenSquare(9, 0);
        CitizenSquare CS10 = new CitizenSquare(10, 0);
        CitizenSquare CS11 = new CitizenSquare(11, 0);

        MandarinSquare MQ0=  new MandarinSquare(0, 0, true);
        MandarinSquare MQ6=  new MandarinSquare(6, 0, false);
        squares = new ArrayList<BoardSquare>();
        squares.add(MQ0);
        squares.add(CS1);
        squares.add(CS2);
        squares.add(CS3);
        squares.add(CS4);
        squares.add(CS5);
        squares.add(MQ6);
        squares.add(CS7);
        squares.add(CS8);
        squares.add(CS9);
        squares.add(CS10);
        squares.add(CS11);
        Board MainBoard =  new Board(squares);
        Player player1 =  new Player(1,0);
        Player player2 = new Player(2,0);
        MainGame =  new Game(MainBoard,player1,player2, true);
        
        loadImageHolder();

        ArrayList<BoardSquare> validsquare1 = new ArrayList<BoardSquare>();
        validsquare1.add(CS11);
        validsquare1.add(CS10);
        validsquare1.add(CS9);
        validsquare1.add(CS8);
        validsquare1.add(CS7);
        player1.setValidBoardSquare(validsquare1);

        ArrayList<BoardSquare> validsquare2 = new ArrayList<BoardSquare>();
        validsquare2.add(CS1);
        validsquare2.add(CS2);
        validsquare2.add(CS3);
        validsquare2.add(CS4);
        validsquare2.add(CS5);
        player2.setValidBoardSquare(validsquare2);
    }



    public void ShowInvalidMove(int player_id) {
    	JOptionPane.showMessageDialog(null, "Please choose another square", "Invalid chosen square", JOptionPane.ERROR_MESSAGE);
    }
    
    public void chooseDirection(Player player, int id) {
    	JPanel direction_panel = new JPanel();
        JLabel label1 = new JLabel("What directions do you want to choose?");
        JButton buttonLeft = new JButton("Left");
        JButton buttonRight = new JButton("Right");

        frame = new JFrame("Choose directions");
        direction_panel.add(label1);
        direction_panel.add(buttonLeft);
        direction_panel.add(buttonRight);
        frame.add(direction_panel);
        frame.setSize(300, 100);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        if(player.getPlayerID()==1) {
        	buttonLeft.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (e.getSource() == buttonLeft) {
                        frame.setVisible(false);
                        makeMove(MainGame.getMyBoard(), id, true, player);
                    }
                }
            });
            buttonRight.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (e.getSource() == buttonRight) {
                        frame.setVisible(false);
                        makeMove(MainGame.getMyBoard(), id, false, player);

                    }
                }
            });
        }else {
        	buttonLeft.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (e.getSource() == buttonLeft) {
                        frame.setVisible(false);
                        makeMove(MainGame.getMyBoard(), id, false, player);
                    }
                }
            });
            buttonRight.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (e.getSource() == buttonRight) {
                        frame.setVisible(false);
                        makeMove(MainGame.getMyBoard(), id, true, player);
                    }
                }
            });
        }
    }

    public void ChoosePivot(int id) {
        if (MainGame.isP1Turn()) {
            if (MainGame.getPlayer1().isValidMove(MainGame.getMyBoard(), id)) {
            	chooseDirection(MainGame.getPlayer1(), id);
            } else {
            	System.out.println("Invalid Move player 1");
                ShowInvalidMove(1);
            }
        } else {
            if (MainGame.getPlayer2().isValidMove(MainGame.getMyBoard(), id)) {
            	chooseDirection(MainGame.getPlayer2(), id);            }
            else {
            	System.out.println("Invalid Move player 2");
                ShowInvalidMove(2);
            }
        }
    }
    public void collectCitizen(int squareID){
        for ( int i= ImageHolder.size()-1;i>=0;i--){
            if (ImageHolder.get(i).square_id== squareID){
                if (ImageHolder.get(i).type==2) gc.clearRect(ImageHolder.get(i).coordX, ImageHolder.get(i).coordY, 16,16);
                else gc.clearRect(ImageHolder.get(i).coordX, ImageHolder.get(i).coordY, 32,32);
                ImageHolder.remove(i);
            }
        }
    }
    public void distributeCitizen(int squareID){
        if (squareID==0) {
                int randomNumX = ThreadLocalRandom.current().nextInt(150,210-32);
                int randomNumY = ThreadLocalRandom.current().nextInt(265,400-32);
                ImageHolder.add(new ViewStone(squareID,randomNumX,randomNumY,2));
            }
        else if (squareID<6){
            int randomNumX = ThreadLocalRandom.current().nextInt(150+ squareID* 110, 210+ squareID*110-32);
            int randomNumY = ThreadLocalRandom.current().nextInt(265, 400-32);
                ImageHolder.add(new ViewStone(squareID,randomNumX,randomNumY,2));
        }
        else if (squareID==6) {
            int randomNumX = ThreadLocalRandom.current().nextInt(150 + squareID * 110, 150 + squareID * 110 + 50 - 32);
            int randomNumY = ThreadLocalRandom.current().nextInt(265, 400 - 32);
            ImageHolder.add(new ViewStone(squareID, randomNumX, randomNumY, 2));
        }
        else {
                int randomNumX = ThreadLocalRandom.current().nextInt(150+ (12-squareID)*110,150+(12-squareID)*110+50-16);
                int randomNumY = ThreadLocalRandom.current().nextInt(395,445-16);
                ImageHolder.add(new ViewStone(squareID,randomNumX,randomNumY,2));
        }
    }
    public void makeMove(Board b, int choosenSquareID, boolean isLeftMove, Player player) {
            // Start to make move
            ArrayList<BoardSquare> bss = b.getListOfSquare();
            BoardSquare choosenSquare = b.getListOfSquare().get(choosenSquareID);
            int citizens = choosenSquare.getNumberOfCitizens();
            int currentSquareID = choosenSquareID;
            choosenSquare.setNumberOfCitizens(0);
            collectCitizen(currentSquareID);
            bss.set(currentSquareID, choosenSquare);

            while(citizens>0) {
            	System.out.println(citizens);
                try{
                Thread.sleep(500);}
                catch(InterruptedException e) {
                    System.out.println("Error@##");
                }

                citizens--;
                if(isLeftMove == true) {
                    if(currentSquareID == 11) currentSquareID = 0;
                    else currentSquareID++;
                    bss.get(currentSquareID).setNumberOfCitizens(bss.get(currentSquareID).getNumberOfCitizens()+1);
                }else {
                    if(currentSquareID == 0) currentSquareID = 11;
                    else currentSquareID--;
                    bss.get(currentSquareID).setNumberOfCitizens(bss.get(currentSquareID).getNumberOfCitizens()+1);
                }
                distributeCitizen(currentSquareID);

                // decide if the turn is continued or stopped (get point or not)
                if(citizens==0) {
                    if(isLeftMove == true) {
                        if(currentSquareID == 11) currentSquareID = 0;
                        else currentSquareID++;
                        // Capture or continue the turn
                        
                        boolean flag = true;
                        
                        while(bss.get(currentSquareID).isEmpty()) {
                        	System.out.println("Capture square");
                        	int targetSquareID;
                        	if(currentSquareID == 11) targetSquareID = 0;
                        	else targetSquareID = currentSquareID+1;
                        	if(bss.get(targetSquareID).isEmpty()==false) {
                        		player.captureSquare(bss, currentSquareID, isLeftMove);
                                try{
                                    Thread.sleep(500);}
                                catch(InterruptedException e) {
                                    System.out.println("Error@##");
                                }
                        		collectCitizen(targetSquareID);
                                if(currentSquareID==11) currentSquareID = 1;
                            	else if(currentSquareID == 10) currentSquareID = 0;
                            	else currentSquareID += 2;
                        	}else break;
                        	flag = false;
                        }
                        if(flag == false) break;
                        
                        if(bss.get(currentSquareID) instanceof CitizenSquare) {
                        	System.out.println("Continue");
                        	BoardSquare currentSquare = (CitizenSquare) bss.get(currentSquareID);
                        	citizens = currentSquare.getNumberOfCitizens();
                            try{
                                Thread.sleep(500);}
                            catch(InterruptedException e) {
                                System.out.println("Error@##");
                            }
                            collectCitizen(currentSquareID);
                            currentSquare.setNumberOfCitizens(0);
                            bss.set(currentSquareID, currentSquare);
                        }
                    }else {
                        if(currentSquareID == 0) currentSquareID = 11;
                        else currentSquareID--;
                        // Capture or continue the turn
                        
                        boolean flag = true;
                        while(bss.get(currentSquareID).isEmpty()) {
                        	System.out.println("Capture square");
                        	int targetSquareID;
                        	if(currentSquareID == 0) targetSquareID = 11;
                        	else targetSquareID = currentSquareID-1;
                        	if(bss.get(targetSquareID).isEmpty()==false) {
                        		player.captureSquare(bss, currentSquareID, isLeftMove);
                                try{
                                    Thread.sleep(500);}
                                catch(InterruptedException e) {
                                    System.out.println("Error@##");
                                }
                        		collectCitizen(targetSquareID);
                        		if(currentSquareID==1) currentSquareID = 11;
                            	else if(currentSquareID == 0) currentSquareID = 10;
                            	else currentSquareID -= 2;
                        	}else break;
                        	flag = false;
                        }
                        if(flag == false) break;
                        
                        if(bss.get(currentSquareID) instanceof CitizenSquare) {
                        	System.out.println("Continue");
                        	BoardSquare currentSquare = (CitizenSquare) bss.get(currentSquareID);
                        	citizens = currentSquare.getNumberOfCitizens();
                            try{
                                Thread.sleep(500);}
                            catch(InterruptedException e) {
                                System.out.println("Error@##");
                            }
                            collectCitizen(currentSquareID);
                            currentSquare.setNumberOfCitizens(0);
                            bss.set(currentSquareID, currentSquare);
                        }
                    }
                }
//                System.out.print(currentSquareID + " ");
//
//                ArrayList<BoardSquare> listOfSquares = bss;
//                for(BoardSquare i : listOfSquares) {
//                    if(i.getboardSquareID()==0) {
//                        MandarinSquare ms0 = (MandarinSquare) i;
//                        System.out.print(" ( " + ms0.getNumberOfCitizens() + " " + Boolean.toString(ms0.isContainMandarin()) + " (" + ms0.getboardSquareID() + ") | ");
//                    }else if(i.getboardSquareID()==6) {
//                        MandarinSquare ms6 = (MandarinSquare) i;
//                        System.out.println("" + ms6.getNumberOfCitizens() + " " + Boolean.toString(ms6.isContainMandarin()) + " (" + ms6.getboardSquareID() + ") ) ");
//                        System.out.print("\t\t");
//                    }else if(i.getboardSquareID()>=1 && i.getboardSquareID() <= 5) {
//                        System.out.print(i.getNumberOfCitizens() + " (" + i.getboardSquareID() + ") | ");
//                    }else break;
//                }
//                for(int i = 11; i >= 7; i--) {
//                    BoardSquare cb = bss.get(i);
//                    System.out.print(cb.getNumberOfCitizens() + " (" + cb.getboardSquareID() + ") | ");
//                }
//                System.out.println("\n");

            }
//            System.out.println();

            b.setListOfSquare(bss);
            if(MainGame.getPlayer1().equals(player)) {
            	MainGame.setP1Turn(false);
            	MainGame.getPlayer2().dispatchCitizens(b);
//            	for(int i = 0; i <= 11; i++) {
//					collectCitizen(i);
//				}
            	loadImageHolder();
//            	run(gc);
            }else {
            	MainGame.setP1Turn(true);
            	MainGame.getPlayer1().dispatchCitizens(b);
//            	for(int i = 0; i <= 11; i++) {
//					collectCitizen(i);
//				}
            	loadImageHolder();
//            	run(gc);
            }
            if(MainGame.isEndGame()) {
            	JPanel dialog_panel = new JPanel();
                JLabel label1 = new JLabel("The Game has ended");
                
                JPanel buttonPanel = new JPanel();
                JButton buttonLeft = new JButton("Restart");
                JButton buttonRight = new JButton("Quit game");
                buttonPanel.add(buttonLeft);
                buttonPanel.add(buttonRight);
                frame = new JFrame("End Game");

                dialog_panel.add(label1);
                dialog_panel.add(buttonPanel);
                frame.add(dialog_panel);
                frame.setSize(300, 100);
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
                
                buttonLeft.addActionListener(new ActionListener() {
					
					@Override
					public void actionPerformed(ActionEvent e) {
						// TODO Auto-generated method stub
						if(e.getSource()==buttonLeft) {
							frame.setVisible(false);
							MainGame.restart();
							for(int i = 0; i <= 11; i++) {
								collectCitizen(i);
							}
							loadImageHolder();
							run(gc);
							
							Platform.runLater(new Runnable() {
							    @Override
							    public void run() {
							        // do your GUI stuff here
							    	stage.setScene(scene2);
							    }
							});
						}
					}
				});
                
                buttonRight.addActionListener(new ActionListener() {
					
					@Override
					public void actionPerformed(ActionEvent e) {
						// TODO Auto-generated method stub
						if(e.getSource()==buttonRight) {
							frame.setVisible(false);
							MainGame.restart();
							for(int i = 0; i <= 11; i++) {
								collectCitizen(i);
							}
							loadImageHolder();
							run(gc);
							Platform.runLater(new Runnable() {
							    @Override
							    public void run() {
							        // do your GUI stuff here
							    	stage.setScene(scene1);
							    }
							});
						}
					}
				});
                
            }
            System.out.println("End make move");
    }
    private class CitizenSquareUI extends StackPane{
        CitizenSquareUI(String name, Runnable action,int width, int height, int id) {
            LinearGradient gradient = new LinearGradient(0, 0.5, 1, 0.5, true, CycleMethod.NO_CYCLE,
                    new Stop(0.1, Color.web("black", 0.75)),
                    new Stop(1.0, Color.web("black", 0.15))
            );

            Rectangle bg = new Rectangle(width, height);
            Text text = new Text("Square number: "+ id +" \nCurrent Citizen: "+ Integer.toString(squares.get(id).getNumberOfCitizens()));
            text.setFont(Font.font(10.0));
            text.fillProperty().bind(
              Bindings.when(bg.hoverProperty()).then(Color.BLUE).otherwise(Color.TRANSPARENT)
            );
            bg.fillProperty().bind(
                    Bindings.when(hoverProperty()).then(Color.GRAY).otherwise(Color.TRANSPARENT)
            );
            setOnMouseClicked(e -> action.run());

            getChildren().addAll(bg, text);
        }

    }
    private Pane createStartMenu() {
        Pane root = new Pane();
        root.setPrefSize(1280,720);
        Image bgImage =  new Image(getClass().getResource("gui/asset/menu_bg.jpg").toExternalForm());
        VBox box =  new VBox(
                10,
                new MenuItem("LET'S PLAT MANDARIN SQUARE",()->{}),
                new MenuItem("START NEW GAME", ()-> stage.setScene(scene2)),
                new MenuItem("SETTING",()->{}),
                new MenuItem("QUIT",() -> Platform.exit())
        );
        box.setBackground(new Background(new BackgroundFill(Color.web("black", 0.6),null,null)));
        box.setTranslateX(500);
        box.setTranslateY(250) ;
        root.getChildren().addAll(
                new ImageView(bgImage),
                box

        );
        return root;
    }
    public void setStartGame(boolean status){
        this.startGame=status;
        if (!status){
            stage.setScene(scene1);
        }
        else{
            stage.setScene(scene2);
        }
    }
    private static class MenuItem extends StackPane {
        MenuItem(String name, Runnable action){
            LinearGradient gradient = new LinearGradient(0, 0.5, 1, 0.5, true, CycleMethod.NO_CYCLE,
                    new Stop(0.1, Color.web("black",0.75)),
                    new Stop(1.0, Color.web("black",0.15))
            );

            Rectangle bg = new Rectangle(250,30,gradient);
            Text text  = new Text(name);
            text.setFont(Font.font(22.0));
            text.fillProperty().bind(
                    Bindings.when(hoverProperty()).then(Color.WHITE).otherwise(Color.GRAY)
            );

            setOnMouseClicked(e->action.run());
            getChildren().addAll(bg, text);

        }
    }

    public static void main(String[] args){
        launch(args);
    }
}

